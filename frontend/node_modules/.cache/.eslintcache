[{"/home/ubuntu/p4u/frontend/src/index.js":"1","/home/ubuntu/p4u/frontend/src/App.js":"2","/home/ubuntu/p4u/frontend/src/Components/AnimatedRoutes.js":"3","/home/ubuntu/p4u/frontend/src/Components/ChatbaseChatbotEmbed.js":"4","/home/ubuntu/p4u/frontend/src/contexts/usercontext.js":"5","/home/ubuntu/p4u/frontend/src/Components/Home.js":"6","/home/ubuntu/p4u/frontend/src/Components/Message.js":"7","/home/ubuntu/p4u/frontend/src/Components/Userhome.js":"8","/home/ubuntu/p4u/frontend/src/Components/LoginForm.js":"9","/home/ubuntu/p4u/frontend/src/Components/RegisterForm.js":"10","/home/ubuntu/p4u/frontend/src/Components/Chat.js":"11","/home/ubuntu/p4u/frontend/src/Components/adminPages/getuserdetails.js":"12","/home/ubuntu/p4u/frontend/src/Components/Footer.js":"13","/home/ubuntu/p4u/frontend/src/contexts/auth.js":"14","/home/ubuntu/p4u/frontend/src/Components/payment.js":"15","/home/ubuntu/p4u/frontend/src/Components/querypage.js":"16","/home/ubuntu/p4u/frontend/src/Components/Initial.js":"17","/home/ubuntu/p4u/frontend/src/Components/adminPages/addanimal.js":"18","/home/ubuntu/p4u/frontend/src/Components/adminPages/editanimal.js":"19","/home/ubuntu/p4u/frontend/src/Components/adminPages/AdminHome.js":"20","/home/ubuntu/p4u/frontend/src/Components/adminPages/Adminchat.js":"21","/home/ubuntu/p4u/frontend/src/Components/adminPages/viewanimal.js":"22","/home/ubuntu/p4u/frontend/src/Components/adminPages/responses.js":"23","/home/ubuntu/p4u/frontend/src/Components/Button.js":"24","/home/ubuntu/p4u/frontend/src/Components/Header.js":"25","/home/ubuntu/p4u/frontend/src/hooks/useMediaQuery.js":"26","/home/ubuntu/p4u/frontend/src/Components/Spinner.js":"27"},{"size":265,"mtime":1730201510587,"results":"28","hashOfConfig":"29"},{"size":525,"mtime":1730203836270,"results":"30","hashOfConfig":"29"},{"size":2457,"mtime":1730203836270,"results":"31","hashOfConfig":"29"},{"size":782,"mtime":1730203836270,"results":"32","hashOfConfig":"29"},{"size":1391,"mtime":1731142569357,"results":"33","hashOfConfig":"29"},{"size":3090,"mtime":1730203836270,"results":"34","hashOfConfig":"29"},{"size":6382,"mtime":1730203836270,"results":"35","hashOfConfig":"29"},{"size":2369,"mtime":1730203836271,"results":"36","hashOfConfig":"29"},{"size":4472,"mtime":1731147352748,"results":"37","hashOfConfig":"29"},{"size":6113,"mtime":1730201510577,"results":"38","hashOfConfig":"29"},{"size":4912,"mtime":1730203836270,"results":"39","hashOfConfig":"29"},{"size":3781,"mtime":1730201510577,"results":"40","hashOfConfig":"29"},{"size":469,"mtime":1730201510576,"results":"41","hashOfConfig":"29"},{"size":888,"mtime":1730201510587,"results":"42","hashOfConfig":"29"},{"size":3617,"mtime":1730201510577,"results":"43","hashOfConfig":"29"},{"size":5488,"mtime":1730201510577,"results":"44","hashOfConfig":"29"},{"size":1153,"mtime":1730201510576,"results":"45","hashOfConfig":"29"},{"size":6320,"mtime":1730201510577,"results":"46","hashOfConfig":"29"},{"size":6570,"mtime":1730201510577,"results":"47","hashOfConfig":"29"},{"size":2498,"mtime":1730203836271,"results":"48","hashOfConfig":"29"},{"size":5673,"mtime":1730203836271,"results":"49","hashOfConfig":"29"},{"size":4332,"mtime":1730203836271,"results":"50","hashOfConfig":"29"},{"size":4438,"mtime":1730203836271,"results":"51","hashOfConfig":"29"},{"size":180,"mtime":1730201510576,"results":"52","hashOfConfig":"29"},{"size":3245,"mtime":1731146767148,"results":"53","hashOfConfig":"29"},{"size":994,"mtime":1730201510587,"results":"54","hashOfConfig":"29"},{"size":188,"mtime":1730201510577,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ggkl6",{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ubuntu/p4u/frontend/src/index.js",[],[],"/home/ubuntu/p4u/frontend/src/App.js",[],[],"/home/ubuntu/p4u/frontend/src/Components/AnimatedRoutes.js",["157"],[],"import { Route, Routes, useLocation, Navigate } from \"react-router-dom\";\r\nimport { AnimatePresence } from 'framer-motion';\r\nimport { AuthProvider } from \"../contexts/auth\";\r\n\r\nimport Initial from './Initial';\r\nimport LoginForm from \"./LoginForm.js\";\r\nimport Home from \"./Home.js\";\r\nimport Message from \"./Message.js\";\r\nimport RegisterForm from \"./RegisterForm.js\";\r\nimport Footer from \"./Footer\";\r\nimport AdminHome from \"./adminPages/AdminHome\"\r\nimport Editanimal from \"./adminPages/editanimal\"\r\nimport Addanimal from \"./adminPages/addanimal\"\r\nimport Viewanimal from \"./adminPages/viewanimal\"\r\nimport Adminchat from \"./adminPages/Adminchat\"\r\nimport Querypage from \"./querypage\";\r\nimport Payment from \"./payment\";\r\nimport Responses from \"./adminPages/responses\"\r\nimport Userdetail from \"./adminPages/getuserdetails.js\"\r\nimport Userhome from \"./Userhome.js\";\r\nimport Chat from \"./Chat.js\"; // Import the Chat component\r\n\r\nconst AnimatedRoutes = () => {\r\n  const location = useLocation();\r\n\r\n  // Check if the current route is '/chat'\r\n  const isChatRoute = location.pathname === '/chat'||location.pathname === '/Adminchat';\r\n\r\n  return (\r\n    <AnimatePresence exitBeforeEnter>\r\n      <AuthProvider>\r\n        <Routes location={location} key={location.pathname}>\r\n          <Route exact path='/' element={<Initial />} />\r\n          <Route path='/login' element={<LoginForm />} />\r\n          <Route path='/register' element={<RegisterForm />} />\r\n          <Route path='/pets' element={<Home />} />\r\n          <Route path='/editanimal' element={<Editanimal/>} />\r\n          <Route path='/profile' element={<Message />} />\r\n          <Route path='/adminhome' element={<AdminHome/>} />\r\n          <Route path='/addanimal' element={<Addanimal/>} />\r\n          <Route path='/viewanimal' element={<Viewanimal/>} />\r\n          <Route path='/querypage' element={<Querypage/>} />\r\n          <Route path='/responses' element={<Responses/>} />\r\n          <Route path='/payment' element={<Payment/>} />\r\n          <Route path='/getuserdetail' element={<Userdetail/>} />\r\n          <Route path='/userhome' element={<Userhome/>} />\r\n          <Route path='/chat' element={<Chat />} /> \r\n          <Route path='/Adminchat' element={<Adminchat />} /> \r\n        </Routes>\r\n        {/* Render the footer only if the current route is not '/chat' */}\r\n        {!isChatRoute && <Footer />}\r\n      </AuthProvider>\r\n    </AnimatePresence>\r\n  );\r\n};\r\n\r\nexport default AnimatedRoutes;\r\n","/home/ubuntu/p4u/frontend/src/Components/ChatbaseChatbotEmbed.js",["158"],[],"// ChatbaseChatbotEmbed.jsx\r\n\r\nimport React, { useEffect } from 'react';\r\n\r\nconst ChatbaseChatbotEmbed = () => {\r\n  useEffect(() => {\r\n    // Create a script element\r\n    const script = document.createElement('script');\r\n    script.src = 'https://www.chatbase.co/embed.min.js';\r\n    script.setAttribute('chatbotId', 'xRspk29JJ9TNMJbeYpUR-');\r\n    script.setAttribute('domain', 'www.chatbase.co');\r\n    script.defer = true;\r\n\r\n    // Append the script to the body\r\n    document.body.appendChild(script);\r\n\r\n    // Clean up function to remove the script on unmount (optional)\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, []);\r\n\r\n  return null; // No need to render anything here, as scripts handle embedding\r\n};\r\n\r\nexport default ChatbaseChatbotEmbed;\r\n","/home/ubuntu/p4u/frontend/src/contexts/usercontext.js",["159","160"],[],"import React, { useEffect, createContext } from 'react';\r\nimport useState from 'react-usestateref'\r\nimport Cookies from \"universal-cookie\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nconst UserContext = createContext();\r\n\r\nconst bu = process.env.REACT_APP_BASEURL\r\n\r\nexport const UserProvider = ({ children }) => {\r\n\r\n\tconst navigate = useNavigate();\r\n\tconst [ currentUser, setCurrentUser,reff ] = useState({\r\n\t\tname: null,\r\n    email: null,\r\n\r\n\t});\r\n\t\r\n\tconst cookies = new Cookies();\r\n\tconst token = cookies.get(\"jwtoken\");\r\n\tuseEffect(() => {\r\n\t\tconst checkLoggedIn = async () => {\r\n\t\t\t\r\n\r\n\t\t\ttry {\r\n\t\t\t\t\t\tconst res = await fetch(`${bu}/afterlogin`, {\r\n\t\t\t\tmethod: \"GET\",\r\n\t\t\t\theaders: {\r\n\t\t\t\tAccept: \"application/json\",\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\tif (res.status === 401) {\r\n      \r\n\t\t\t\tconst error = new Error(res.error);\r\n\t\t\t\tthrow error;\r\n\t\t\t  }\r\n\t\t\t\tconst data = await res.json();\r\n\t\t\t\tconst em=data.email;\r\n\t\t\t\tconst nam=data.name;\r\n\t\t\t\tsetCurrentUser({\r\n\r\n\t\t\t\t\t\tname: nam,\r\n                       email: em,\r\n\t\t\t\t\t});\r\n\t\t\t\t \r\n\t\t\t\t  \r\n\t\t\t\t\r\n\t\t\t  } catch (err) {\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t  }\r\n\t\t};\r\n\r\n\t\tcheckLoggedIn();\r\n\t}, []);\r\n\r\n\t\r\n\treturn (\r\n\t\t<UserContext.Provider value={{currentUser, setCurrentUser,reff}}>\r\n\t\t\t{ children}\r\n\t\t</UserContext.Provider>\r\n\t);\r\n};\r\n\r\n\r\nexport default UserContext;\r\n","/home/ubuntu/p4u/frontend/src/Components/Home.js",["161","162","163"],[],"import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useState from 'react-usestateref'\r\nimport { motion } from 'framer-motion';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport Cookies from \"universal-cookie\";\r\nconst bu=process.env.REACT_APP_BASEURL\r\nconst Viewanimal = () => {\r\n    const [petsdata,setpetsdata,ref]=useState([{}]);\r\n    const [data,setuserdata,reef]=useState([]);\r\n    useEffect(() => {\r\n      window.scrollTo(0, 0)\r\n    }, [])\r\n    const getanimals = async () => {\r\n\r\n        try {\r\n          const res = await fetch(`${bu}/getanimaldatafromredis`, {\r\n            method: \"GET\",\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            \r\n          });\r\n         \r\n          if (res.status === 401) {\r\n          \r\n            const error = new Error(res.error);\r\n            throw error;\r\n          }\r\n          const data = await res.json();\r\n          setpetsdata(data);\r\n        \r\n          \r\n          \r\n        } catch (err) {\r\n          navigate(\"/login\");\r\n          \r\n        }\r\n      };\r\n\r\n    \r\n\r\n\r\n\r\n\r\n  const navigate = useNavigate();\r\n  const cookies = new Cookies();\r\n  const token = cookies.get(\"jwtoken\");\r\n  const login = async () => {\r\n\r\n    try {\r\n      const res = await fetch(`${bu}/afterlogin`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      \r\n      const data = await res.json();\r\n      setuserdata(data)\r\n      \r\n      \r\n    } catch (err) {\r\n      navigate(\"/login\");\r\n      \r\n     \r\n      \r\n    }\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n\r\n     \r\n\r\n  useEffect(() => {\r\n    login();\r\n    getanimals();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <>\r\n      {reef.current.usertype===\"1\"&&navigate(\"/login\")}\r\n    <Header/>\r\n    <motion.section className='home' initial={{ width: 0 }} animate={{ width: \"auto\", transition: { duration: 0.5 } }} exit={{ x: window.innerWidth, transition: { duration: 0.5 } }}>\r\n      <p>Hello!<br /> See friends available for adoption!</p>\r\n      <div className='cards'>\r\n        {\r\n          ref.current.map((pet, i) => (\r\n            <div key={i} className='card'>\r\n            <img src={pet.img} alt={pet.name} />\r\n            <h4>{pet.name}</h4>\r\n            <ul>\r\n              <li>{pet.age}</li>\r\n              <li>{pet.size}</li>\r\n              <li>{pet.behaviour}</li>\r\n                \r\n              </ul>\r\n            \r\n              <p className='card__city'>{pet.city}</p>\r\n              <Link className='card__contact' to=\"/querypage\" state={pet}>Talk to person in charge</Link>\r\n             \r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n    </motion.section >\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Viewanimal;","/home/ubuntu/p4u/frontend/src/Components/Message.js",["164","165"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Header from \"./Header\";\r\nimport loggedUser from \"../assets/usernew.png\";\r\nimport Swal from \"sweetalert2\";\r\nimport Button from \"./Button\";\r\n\r\nconst bu = process.env.REACT_APP_BASEURL;\r\nconst cloudinaryUploadPreset = \"txzq9zlc\";\r\n\r\nconst Message = () => {\r\n  const location = useLocation();\r\n  const [data, setUserData] = useState({});\r\n  const [loading, setLoading] = useState(false); // State to manage loading state\r\n  const navigate = useNavigate();\r\n  const cookies = new Cookies();\r\n  const token = cookies.get(\"jwtoken\");\r\n\r\n  useEffect(() => {\r\n    const login = async () => {\r\n      try {\r\n        const res = await fetch(`${bu}/afterlogin`, {\r\n          method: \"GET\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        if (res.status === 401) {\r\n          throw new Error(\"Unauthorized\");\r\n        }\r\n\r\n        const userData = await res.json();\r\n        setUserData(userData);\r\n      } catch (err) {\r\n        navigate(\"/login\");\r\n      }\r\n    };\r\n\r\n    login();\r\n  }, [bu, navigate, token]);\r\n\r\n  const { register, handleSubmit, formState: { errors } } = useForm({\r\n    mode: 'onBlur',\r\n    reValidateMode: 'onChange'\r\n  });\r\n\r\n  const handleFileUpload = async (e) => {\r\n    setLoading(true); // Set loading state to true when file upload starts\r\n    const file = e.target.files[0];\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('upload_preset', cloudinaryUploadPreset);\r\n\r\n    try {\r\n      const response = await fetch(`https://api.cloudinary.com/v1_1/dkzp6m6ls/image/upload`, {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to upload image');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setUserData(prevData => ({\r\n        ...prevData,\r\n        image: data.secure_url,\r\n      }));\r\n    } catch (error) {\r\n     // console.error('Error uploading image:', error);\r\n      Swal.fire({\r\n        title: 'Error!',\r\n        text: 'Failed to upload image',\r\n        icon: 'error',\r\n        confirmButtonText: 'OK',\r\n      });\r\n    } finally {\r\n      setLoading(false); // Set loading state to false after upload completes (success or failure)\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (formDataInput) => {\r\n    try {\r\n      const res = await fetch(`${bu}/editform/${data._id}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name: data.name,\r\n          phone: data.phone,\r\n          city: data.city,\r\n          message: data.message,\r\n          image: data.image,\r\n        }),\r\n      });\r\n\r\n      const dataa = await res.json();\r\n      if (dataa.error || dataa.status === 422 || dataa.status === 400 || dataa.status === 404 || dataa.status === 500) {\r\n        Swal.fire({\r\n          title: 'Error!',\r\n          text: 'Please enter valid details',\r\n          icon: 'error',\r\n          confirmButtonText: 'Retry'\r\n        });\r\n      } else {\r\n        Swal.fire({\r\n          title: 'Success!',\r\n          text: 'Updation Successful',\r\n          icon: 'success',\r\n          confirmButtonText: 'Success',\r\n          timer: 2000\r\n        });\r\n        if (data.usertype === '1') {\r\n          navigate(\"/adminhome\");\r\n        } else {\r\n          navigate(\"/userhome\");\r\n        }\r\n      }\r\n    } catch (err) {\r\n      //console.error(err);\r\n      Swal.fire({\r\n        title: 'Error!',\r\n        text: 'Failed to update profile',\r\n        icon: 'error',\r\n        confirmButtonText: 'OK',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEdit = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserData({ ...data, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <motion.section className='message' initial={{ width: 0 }} animate={{ width: \"auto\", transition: { duration: 0.5 } }} exit={{ x: window.innerWidth, transition: { duration: 0.5 } }}>\r\n        {data.usertype === '2' && <p>This is the profile that appears to officials or NGOs that receive your message.</p>}\r\n        <form onSubmit={handleSubmit(onSubmit)} >\r\n          <legend>Profile</legend>\r\n\r\n          <label htmlFor=\"image\">\r\n            <img src={loading ? loggedUser : data.image || loggedUser} alt=\"\" />\r\n            {loading && <div className=\"loader\">Uploading image...</div>} \r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            name=\"image\"\r\n            id='image'\r\n            accept='.jpeg, .png, .jpg'\r\n            {...register('image', {})}\r\n            onChange={(e) => handleFileUpload(e)}\r\n          />\r\n\r\n          <label htmlFor=\"name\">Name</label>\r\n          <input id='name' type=\"text\" {...register(\"name\", { maxLength: { value: 40, message: 'The maximum number of characters is 25' } })} value={data.name || ''} placeholder='Enter your full name' onChange={handleEdit} />\r\n          {errors.name && <p className=\"error\">{errors.name.message}</p>}\r\n\r\n          <label htmlFor=\"phone\">Telephone</label>\r\n          <input type=\"tel\" id='phone' {...register('phone', { pattern: /\\(?[1-9]{2}\\)?\\s?9?[0-9]{8}/ })} placeholder='Enter your phone number' value={data.phone || ''} onChange={handleEdit} />\r\n          {errors.phone && <p className=\"error\">{errors.phone.message || 'Please verify the number entered'}</p>}\r\n\r\n          <label htmlFor=\"city\">Address</label>\r\n          <input type=\"text\" id='city' {...register('city', {})} placeholder='Enter your Address' value={data.city || ''} onChange={handleEdit} />\r\n\r\n          <label htmlFor=\"about\">About</label>\r\n          <textarea spellCheck='false' name=\"about\" id=\"about\" cols=\"30\" rows=\"8\" value={data.message || ''} placeholder='Enter your message or other details you wish to share' {...register('message', {})} onChange={handleEdit}></textarea>\r\n\r\n          <Button type='submit'>UPDATE</Button>\r\n        </form>\r\n      </motion.section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","/home/ubuntu/p4u/frontend/src/Components/Userhome.js",["166","167","168"],[],"\r\nimport { Link,useNavigate } from 'react-router-dom';\r\nimport useState from 'react-usestateref'\r\nimport {  useEffect} from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport Header from \"./Header\";\r\n\r\nimport { Helmet } from 'react-helmet';\r\nimport SvgComponent from '../assets/logo-no-background3.png'\r\nimport Cookies from \"universal-cookie\";\r\nconst bu=process.env.REACT_APP_BASEURL\r\nconst Userhome = () => {\r\n  \r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n  const cookies = new Cookies();\r\n\r\n  const [data,setuserdata,ref]=useState([]);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  const token = cookies.get(\"jwtoken\");\r\n  const login = async () => {\r\n\r\n    try {\r\n      const res = await fetch(`${bu}/afterlogin`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      const data = await res.json();\r\n     setuserdata(data)\r\n      setIsLoading(false)   \r\n     \r\n      \r\n    } catch (err) {\r\n      navigate(\"/login\");\r\n      \r\n     \r\n      \r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    login();\r\n    \r\n  }, []);\r\n \r\n  return (\r\n    <>\r\n    {ref.current.usertype===\"1\"&&navigate(\"/login\")}\r\n   <Header/>\r\n    <motion.section className='initial' initial={{ width: 0 }} animate={{ width: \"auto\", transition: { duration: 0.5 } }} exit={{ x: window.innerWidth, transition: { duration: 0.5 } }}>\r\n      <Helmet>\r\n        <style>{\"body { background-color: #3874ff; }\"}</style>\r\n      </Helmet>\r\n      <img src={SvgComponent} alt=\"Logo AdoPet\" />\r\n      <h3>Welcome!</h3>\r\n      <p>\r\n       Adopting can change a life. How about picking up your new best friend today? Come with us!\r\n      </p>\r\n      <div className='home__buttons'>\r\n        <Link className='button' to='/pets'>View Pets available</Link>\r\n        <br>\r\n\r\n        </br>\r\n       \r\n        <Link className='button' to='/payment'>Donate</Link>\r\n\r\n        <br>\r\n\r\n        </br>\r\n\r\n        <Link className='button' to='/chat'>Connect with our team</Link>\r\n        \r\n      </div>\r\n    </motion.section >\r\n    </>\r\n   \r\n    \r\n  );\r\n};\r\n\r\nexport default Userhome;","/home/ubuntu/p4u/frontend/src/Components/LoginForm.js",["169","170","171"],[],"/home/ubuntu/p4u/frontend/src/Components/RegisterForm.js",["172","173","174","175","176"],[],"\r\nimport Button from \"./Button\";\r\n\r\n\r\nimport { motion } from \"framer-motion\";\r\nimport { useState } from \"react\";\r\nimport { useForm,useController  } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Select from 'react-select';\r\nimport Header from \"./Header\";\r\nimport SvgComponent from '../assets/logo-no-background.png'\r\nimport Swal from 'sweetalert2'\r\nconst bu=process.env.REACT_APP_BASEURL\r\nconst RegisterForm = () => {\r\n\tconst navigate = useNavigate();\r\n\tconst [visiblePassword, setVisiblePassword] = useState({\r\n\t\tpassword: false,\r\n\t\tpasswordRetry: false,\r\n\t});\r\n\r\n\tconst handlePasswordType = (passwordInput) => {\r\n\t\tsetVisiblePassword({\r\n\t\t\t...visiblePassword,\r\n\t\t\t[passwordInput]: visiblePassword[passwordInput] ? false : true,\r\n\t\t});\r\n\t};\r\n\r\nconst[skey,setskey]=useState(\"1\");\r\n\r\nconst handlesc=(e)=>{\r\nsetskey(e.target.value);\r\n\r\n}\r\n\t\r\n\r\n\r\n\t// destructuring useForm\r\n\tconst {\r\n\t\tregister,\r\n\t\thandleSubmit,\r\n\t\twatch,\r\n\t\tformState: { errors },\r\n\t\tcontrol\r\n\t} = useForm({\r\n\t\tmode: \"onBlur\",\r\n\t\treValidateMode: \"onChange\",\r\n\t});\r\n\r\n\tconst languageList = [\r\n\t\t{ value: 1, label: 'Admin' },\r\n\t\t{ value: 2, label: 'User' }\r\n\t  ];\r\n\t  const { field: { value: langValue, onChange: langOnChange, ...restLangField } } = useController({ name: 'usertype', control });\r\n\r\n\tconst onSubmit = async(data) => { \r\n\t\r\n    if(langValue==\"1\"&&skey!=process.env.REACT_APP_SECRET_KEY)\r\n\t{\r\n\t\tSwal.fire({\r\n\t\t\ttitle: 'Error!',\r\n\t\t\ttext: 'Invalid Secret Key ',\r\n\t\t\ticon: 'error',\r\n\t\t\tconfirmButtonText: 'Retry'\r\n\t\t\t})\r\n\t\t\r\n\t}\r\n\telse{\r\n    const { name, email, password ,usertype} = data;\r\n\t\r\n    const res = await fetch(`${bu}/register`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        name: name,\r\n        email: email,\r\n        password: password,\r\n\t\tusertype:usertype,\r\n      }),\r\n    });\r\n\r\n\tconst dataa = await res.json();\r\n \r\n    if (dataa.status === 400 || !dataa|| dataa.error) {\r\n\t\tSwal.fire({\r\n\t\t\ttitle: 'Error!',\r\n\t\t\ttext: 'Some Error occurred',\r\n\t\t\ticon: 'error',\r\n\t\t\tconfirmButtonText: 'Retry'\r\n\t\t\t})\r\n    } else {\r\n\t\tSwal.fire({\r\n\t\t\ttitle: 'Success!',\r\n\t\t\ttext: 'Registration Successful',\r\n\t\t\ticon: 'success',\r\n\t\t\tconfirmButtonText: 'Success',\r\n\t\t\ttimer: '2000'\r\n\t\t\t})\r\n\t\t\tnavigate(\"/login\");\r\n    }\r\n    \r\n   \r\n}\r\n  };\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Header/>\r\n\t\r\n\t\t<motion.section\r\n\t\t\tclassName=\"register\"\r\n\t\t\tinitial={{ width: 0 }}\r\n\t\t\tanimate={{ width: \"auto\", transition: { duration: 0.5 } }}\r\n\t\t\texit={{ x: window.innerWidth, transition: { duration: 0.5 } }}\r\n\t\t>\r\n\t\t\t<img src={SvgComponent} alt=\"\" />\r\n\t\t\t<p>\r\n\t\t\tStill not registered?<br /> So, before picking up your best friend, we need some data:\r\n\t\t\t\r\n\t\t\t</p>\r\n\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t\r\n\r\n      <label>Select Role</label>\r\n      <Select\r\n        className='select-input'\r\n        placeholder=\"Select User Type\"\r\n        isClearable\r\n        options={languageList}\r\n        value={langValue ? languageList.find(x => x.value === langValue) : langValue}\r\n        onChange={option => langOnChange(option ? option.value : option)}\r\n        {...restLangField}\r\n      />\r\n      {errors.usertype && <p>{errors.usertype.message}</p>}\r\n\r\n\r\n\r\n    { langValue==\"1\"?<div>\r\n\t  <label htmlFor=\"name\"><br></br>Secret Key</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tid=\"sc\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t{...register(\"sc\", {\r\n\t\t\t\t\t\trequired: \"Secret key is required\",\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t})}\r\n\t\t\t\t\tplaceholder=\"Enter the secret key\"\r\n\t\t\t\t\tonChange={handlesc}\r\n\t\t\t\t/>\r\n\t\t\t\t{errors.sc&& <p className=\"error\">{errors.sc.message}</p>}\r\n\t\t\t\t</div>:null}\r\n\r\n\r\n\t\r\n\t\t\t\t<label htmlFor=\"name\">Name</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tid=\"name\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t{...register(\"name\", {\r\n\t\t\t\t\t\trequired: \"Your name is required\",\r\n\t\t\t\t\t\tmaxLength: {\r\n\t\t\t\t\t\t\tvalue: 25,\r\n\t\t\t\t\t\t\tmessage: \"The maximum number of characters is 25\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})}\r\n\t\t\t\t\tplaceholder=\"Enter your full name\"\r\n\t\t\t\t/>\r\n\t\t\t\t{errors.name && <p className=\"error\">{errors.name.message}</p>}\r\n\r\n\t\t\t\t<label htmlFor=\"email\">E-mail</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tid=\"email\"\r\n\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t{...register(\"email\", {\r\n\t\t\t\t\t\trequired: \"An email address is required\",\r\n\t\t\t\t\t\tpattern:\r\n\t\t\t\t\t\t\t/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n\t\t\t\t\t})}\r\n\t\t\t\t\tplaceholder=\"Enter your email address\"\r\n\t\t\t\t/>\r\n\t\t\t\t{errors.email && (\r\n\t\t\t\t\t<p className=\"error\">\r\n\t\t\t\t\t\t{errors.email.message || \"Please verify the email entered.\"}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<label htmlFor=\"pass-create\">Password</label>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tonClick={() => handlePasswordType(\"password\")}\r\n\t\t\t\t\t\tclassName=\"pass__view\"\r\n\t\t\t\t\t></span>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid=\"pass-create\"\r\n\t\t\t\t\t\ttype={visiblePassword.password ? \"text\" : \"password\"}\r\n\t\t\t\t\t\t{...register(\"password\", {\r\n\t\t\t\t\t\t\trequired: \"Create a password\",\r\n\t\t\t\t\t\t\tpattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,15}$/,\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\tplaceholder=\"Create a password\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</span>\r\n\t\t\t\t{errors.password && (\r\n\t\t\t\t\t<p className=\"error\">\r\n\t\t\t\t\t\t{errors.password.message ||\r\n\t\t\t\t\t\t\t\"The password must contain at least one capital letter, one number and be between 6 and 15 characters long\"}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<label htmlFor=\"pass-confirm\">Confirm Password</label>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tonClick={() => handlePasswordType(\"passwordRetry\")}\r\n\t\t\t\t\t\tclassName=\"pass__view\"\r\n\t\t\t\t\t></span>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid=\"pass-confirm\"\r\n\t\t\t\t\t\ttype={visiblePassword.passwordRetry ? \"text\" : \"password\"}\r\n\t\t\t\t\t\t{...register(\"confirm_password\", {\r\n\t\t\t\t\t\t\trequired: \"Repeat the password created above\",\r\n\t\t\t\t\t\t\tvalidate: (value) => {\r\n\t\t\t\t\t\t\t\tif (watch(\"password\") !== value) {\r\n\t\t\t\t\t\t\t\t\treturn \"Passwords don't match\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\tplaceholder=\"Repeat the password created above\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</span>\r\n\t\t\t\t{errors.confirm_password && (\r\n\t\t\t\t\t<p className=\"error\">{errors.confirm_password.message}</p>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<Button type=\"submit\" children=\"Register\" />\r\n\t\t\t</form>\r\n\t\t</motion.section>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default RegisterForm;\r\n","/home/ubuntu/p4u/frontend/src/Components/Chat.js",["177","178"],[],"import React, { useEffect, useRef } from 'react';\r\nimport useState from 'react-usestateref';\r\nimport io from 'socket.io-client';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\nimport Header from './Header';\r\nconst bu = process.env.REACT_APP_BASEURL;\r\nconst Chat = () => {\r\n    const navigate = useNavigate();\r\n    const cookies = new Cookies();\r\n    const [data, setUserData, ref] = useState([]);\r\n    const token = cookies.get('jwtoken');\r\n    const login = async () => {\r\n        try {\r\n            const res = await fetch(`${bu}/afterlogin`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            if (res.status === 401) {\r\n                const error = new Error(res.error);\r\n                throw error;\r\n            }\r\n            const data = await res.json();\r\n            setUserData(data);\r\n          //  console.log(data);\r\n        } catch (err) {\r\n            navigate('/login');\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        login();\r\n    }, []);\r\n    const [messages, setMessages] = useState([{}]);\r\n    const [input, setInput] = useState('');\r\n    const socket = useRef(null);\r\n    useEffect(() => {\r\n        socket.current = io('https://paws-4-you-2.onrender.com');\r\n        socket.current.on('connect', () => {\r\n          //  console.log('Socket.IO connected');\r\n        });\r\n        socket.current.on('message', (message) => {\r\n            setMessages((prevMessages) => [...prevMessages, { content: message.content, sender: message.sender }]);\r\n        });\r\n        socket.current.on('disconnect', () => {\r\n            //console.log('Socket.IO disconnected');\r\n        });\r\n        return () => {\r\n            socket.current.disconnect();\r\n        };\r\n    }, []);\r\n    const sendMessage = () => {\r\n        if (input.trim()) {\r\n          const message = {\r\n            content: input,\r\n            sender: ref.current.name // Include the user's name here\r\n        };\r\n           \r\n            socket.current.emit('message', { message });\r\n            setInput('');\r\n        }\r\n    };\r\n    const styles = {\r\n        container: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            marginTop: '20px',\r\n        },\r\n        messages: {\r\n            border: '1px solid black',\r\n            height: '300px',\r\n            width: '100%',\r\n            maxWidth: '600px',\r\n            overflowY: 'scroll',\r\n            padding: '10px',\r\n            marginBottom: '10px',\r\n            backgroundColor: '#f9f9f9',\r\n        },\r\n        message: {\r\n            marginBottom: '5px',\r\n            background: '#36d6ad', // Light green background color\r\n            padding: '5px',\r\n            borderRadius: '5px',\r\n        },\r\n        adminMessage: {\r\n           \r\n            marginBottom: '5px',\r\n            padding: '5px',\r\n            borderRadius: '5px',\r\n            textAlign: 'right', // Aligning admin messages to the right\r\n        },\r\n        inputContainer: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '100%',\r\n            maxWidth: '600px',\r\n        },\r\n        input: {\r\n            width: '80%',\r\n            padding: '10px',\r\n            border: '1px solid #ccc',\r\n            borderRadius: '4px',\r\n            marginRight: '10px',\r\n        },\r\n        button: {\r\n            padding: '10px 20px',\r\n            border: 'none',\r\n            backgroundColor: '#007bff',\r\n            color: 'white',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer',\r\n        },\r\n        buttonHover: {\r\n            backgroundColor: '#0056b3',\r\n        },\r\n    };\r\n    return (<>\r\n    {ref.current.usertype === '1' && navigate('/login')}\r\n    <Header />\r\n    <div style={styles.container}>\r\n      <h2>You are connected to Admin </h2>\r\n      <div style={styles.messages}>\r\n        {messages.map((message, index) => (\r\n          <div key={index} style={message.sender === 'Admin' ? styles.adminMessage : styles.message}>\r\n            <strong>{message.sender}:</strong> {message.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div style={styles.inputContainer}>\r\n        <input type=\"text\" value={input} onChange={(e) => setInput(e.target.value)} onKeyDown={(e) => e.key === 'Enter' && sendMessage()} style={styles.input}/>\r\n        <button onClick={sendMessage} style={styles.button} onMouseOver={(e) => (e.currentTarget.style.backgroundColor = styles.buttonHover.backgroundColor)} onMouseOut={(e) => (e.currentTarget.style.backgroundColor = styles.button.backgroundColor)}>\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </>);\r\n};\r\nexport default Chat;\r\n","/home/ubuntu/p4u/frontend/src/Components/adminPages/getuserdetails.js",["179","180","181"],[],"import React, {  useEffect } from \"react\";\r\nimport useState from 'react-usestateref'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\nimport { useLocation } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\n\r\nimport Header from \"../Header\";\r\nconst bu=process.env.REACT_APP_BASEURL\r\nconst Userdetail = (props) => {\r\n  const location = useLocation();\r\n  \r\n\r\n  const propsData = location.state;\r\n  \r\n\r\n const [data,setuserdata,ref]=useState([]);\r\n const [mydata,setmyuserdata,myref]=useState([]);\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n  const cookies = new Cookies();\r\n  const token = cookies.get(\"jwtoken\");\r\n  const login = async () => {\r\n\r\n    try {\r\n      const res = await fetch(`${bu}/afterlogin`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      const data = await res.json();\r\n  \r\n      setuserdata(data);\r\n     \r\n      \r\n    } catch (err) {\r\n      navigate(\"/login\");\r\n      \r\n     \r\n      \r\n    }\r\n  };\r\n\r\n\r\n  const getaboutuser = async () => {\r\n\r\n    try {\r\n      const res = await fetch(`${bu}/getuser`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          \r\n        },\r\n        body: JSON.stringify({\r\n          \r\n          email: propsData.email,\r\n        \r\n        }),\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      const data = await res.json();\r\n     \r\n      setmyuserdata(data);\r\n     \r\n      \r\n    } catch (err) {\r\n      navigate(\"/login\");\r\n      \r\n    \r\n      \r\n    }\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    login();\r\n    getaboutuser();\r\n  }, []);\r\n  \r\n\r\n  \r\n  return (\r\n    <>\r\n      {ref.current.usertype===\"2\"&&navigate(\"/login\")}\r\n       <Header/>\r\n   \r\n    <motion.section className='message' initial={{ width: 0 }} animate={{ width: \"auto\", transition: { duration: 0.5 } }} exit={{ x: window.innerWidth, transition: { duration: 0.5 } }}>\r\n      {\r\n        \r\n          <>\r\n            <p>These are the details and questions entered by the user:</p>\r\n            <form >\r\n\r\n\r\n            <label htmlFor=\"name\">Name</label>\r\n              <input id='name'  type=\"text\" value={propsData.name}    />\r\n           \r\n\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input id='email'  type=\"text\"  value={propsData.email}   />\r\n             \r\n\r\n\r\n              <label htmlFor=\"phone\">Telephone</label>\r\n              <input type=\"tel\" id='phone'  value={propsData.phone} />\r\n             \r\n\r\n              <label htmlFor=\"animalname\">Name Of animal</label>\r\n              <input id='animalname' type=\"text\"  value={propsData.animalname} />\r\n          \r\n\r\n              <label htmlFor=\"question\">Question</label>\r\n              <textarea name=\"question\" id=\"question\" cols=\"30\" rows=\"10\" value={propsData.question}></textarea>\r\n         \r\n\r\n\r\n              \r\n              <label htmlFor=\"usercity\">UserCity</label>\r\n              <input id='usercity' type=\"text\"  value={myref.current.city} />\r\n             \r\n\r\n              <label htmlFor=\"message\">About User</label>\r\n              <textarea name=\"message\" id=\"message\" cols=\"30\" rows=\"10\" value={myref.current.message}></textarea>\r\n            \r\n\r\n           \r\n            </form>\r\n          </>\r\n        \r\n      }\r\n    </motion.section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Userdetail;\r\n","/home/ubuntu/p4u/frontend/src/Components/Footer.js",[],[],"/home/ubuntu/p4u/frontend/src/contexts/auth.js",["182"],[],"\r\nimport { createContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const navigate = useNavigate();\r\n\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const recoveredUser = localStorage.getItem('user');\r\n\r\n        if (recoveredUser) {\r\n            setUser(JSON.parse(recoveredUser));\r\n        }\r\n\r\n     \r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const login = (email, password) => {\r\n       \r\n\r\n       \r\n    };\r\n\r\n    const logout = () => {\r\n      \r\n        \r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ authenticated: !!user, user, loading, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n","/home/ubuntu/p4u/frontend/src/Components/payment.js",["183","184","185"],[],"\r\nimport { motion } from \"framer-motion\";\r\nimport {  useEffect} from 'react';\r\nimport useState from 'react-usestateref'\r\nimport { useForm,useController  } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SvgComponent from '../assets/logo-no-background.png'\r\nimport Cookies from \"universal-cookie\";\r\nimport Button from \"./Button.js\";\r\nimport axios from \"axios\";\r\nimport Swal from 'sweetalert2'\r\nimport Header from \"./Header\";\r\nconst bu=process.env.REACT_APP_BASEURL\r\nconst Payment = () => {\r\n\r\n\tconst navigate = useNavigate();\r\n\tconst cookies = new Cookies();\r\n\r\n\tconst [data,setuserdata,ref]=useState([]);\r\n\tconst token = cookies.get(\"jwtoken\");\r\n  const login = async () => {\r\n\r\n    try {\r\n      const res = await fetch(`${bu}/afterlogin`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      const data = await res.json();\r\n     setuserdata(data)\r\n     \r\n     \r\n      \r\n    } catch (err) {\r\n      navigate(\"/login\");\r\n      \r\n     \r\n      \r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    login();\r\n    \r\n  }, []);\r\n\t\r\n\t\r\n\tconst {\r\n\t\tregister,\r\n\t\thandleSubmit,\r\n\t\tformState: { errors },\r\n\t\t\r\n\t} = useForm({\r\n\t\tmode: \"onBlur\",\r\n\t\treValidateMode: \"onChange\",\r\n\t});\r\n\r\n\tconst handleOpenRazorpay = (data) => {\r\n\r\n        const options = {\r\n            key:'rzp_test_rGxHmaYvQD7bhS',\r\n            amount: Number(data.amount),\r\n            currency: data.currency,\r\n            order_id: data.id,\r\n            name: 'Paws4You',\r\n            description: 'Serving pets',\r\n            handler: function (response) {\r\n               \r\n                axios.post(`${bu}/verify`, { response: response })\r\n                    .then(res => {\r\n                      \r\n                        Swal.fire({\r\n\t\t\t\t\t\t\ttitle: 'Success!',\r\n\t\t\t\t\t\t\ttext: 'Login Successful',\r\n\t\t\t\t\t\t\ticon: 'success',\r\n\t\t\t\t\t\t\tconfirmButtonText: 'Success',\r\n\t\t\t\t\t\t\ttimer: '2000'\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tnavigate(\"/userhome\");\r\n                    })\r\n                    .catch(err => {\r\n                      \r\n                    })\r\n            }\r\n\r\n        }\r\n        const rzp = new window.Razorpay(options)\r\n        rzp.open()\r\n\t\t\r\n    }\r\n\r\n\t   const onSubmit = (data) => {\r\n\t\tconst {amount}=data;\r\n        const _data = { amount: amount }\r\n        axios.post(`${bu}/orders`, _data)\r\n            .then(res => {\r\n              \r\n                handleOpenRazorpay(res.data.data)\r\n            })\r\n            .catch(err => {\r\n               \r\n            })\r\n    }\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t{ref.current.usertype===\"1\"&&navigate(\"/login\")}\r\n\t\t\t<Header/>\r\n\t\t\r\n\t\t<motion.section\r\n\r\n\t\t\tclassName=\"register\"\r\n\t\t\tinitial={{ width: 0 }}\r\n\t\t\tanimate={{ width: \"100%\", transition: { duration: 0.5 } }}\r\n\t\t\texit={{ x: window.innerWidth, transition: { duration: 0.5 } }}\r\n\t\t>\r\n\t\t\t<img src={SvgComponent} alt=\"\" />\r\n\t\t\t\r\n\t\t\t<p>Help us save mankind</p>\r\n\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n\r\n\t\t\t<label htmlFor=\"amount\">Enter Amount</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tid=\"amount\"\r\n\t\t\t\t\ttype=\"Number\"\r\n\t\t\t\t\t{...register(\"amount\", {\r\n\t\t\t\t\t\trequired: \"An amount is required\",\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t})}\r\n\t\t\t\t\tplaceholder=\"0.0\"\r\n\t\t\t\t/>\r\n\t\t\t\t{errors.amount && (\r\n\t\t\t\t\t<p className=\"error\">\r\n\t\t\t\t\t\t{errors.amount.message }\r\n\t\t\t\t\t</p>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<Button type=\"submit\" children=\"Donate\" />\r\n\t\t\t\t\r\n\t\t\t</form>\r\n\t\t</motion.section>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Payment;\r\n","/home/ubuntu/p4u/frontend/src/Components/querypage.js",["186"],[],"\r\nimport Button from './Button';\r\nimport React, {  useEffect } from \"react\";\r\nimport useState from 'react-usestateref'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\nimport { useLocation } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\nimport { useForm } from \"react-hook-form\";\r\nimport Header from \"./Header\";\r\nimport Swal from 'sweetalert2'\r\n\r\nconst bu=process.env.REACT_APP_BASEURL\r\n\r\nconst Querypage = (props) => {\r\n  const location = useLocation();\r\n\r\n\r\n  const propsData = location.state;\r\n  \r\n\r\n const [data,setuserdata,ref]=useState([]);\r\n \r\n  const navigate = useNavigate();\r\n  const cookies = new Cookies();\r\n  const token = cookies.get(\"jwtoken\");\r\n  const login = async () => {\r\n\r\n    try {\r\n      const res = await fetch(`${bu}/afterlogin`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      const data = await res.json();\r\n   \r\n      setuserdata(data);\r\n     \r\n      \r\n    } catch (err) {\r\n      navigate(\"/login\");\r\n      \r\n    \r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    login();\r\n  }, []);\r\n  let name, value;\r\n  const handleEdit = (e) => {\r\n    name = e.target.name;\r\n    value = e.target.value;\r\n    setuserdata({ ...data, [name]: value });\r\n  };\r\n\r\n\r\n  const { register, handleSubmit, formState: { errors } } = useForm({\r\n    mode: 'onBlur',\r\n    reValidateMode: 'onChange'\r\n  });\r\n\r\n  const onSubmit = async(data) => {\r\n   \r\n    \r\n     \r\n     \r\n      const name=ref.current.name;\r\n      const email=ref.current.email;\r\n      const phone=ref.current.phone;\r\n      const animalname=data.animalname;\r\n      const question=data.question;\r\n      const img=ref.current.image;\r\n    \r\n     const res = await fetch(`${bu}/questionpost`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          img:img,\r\n          name: name,\r\n          phone: phone,\r\n          email:email,\r\n          animalname:animalname,\r\n          question:question,\r\n        }),\r\n      });\r\n  \r\n    const dataa = await res.json();\r\n  \r\n   \r\n    if(dataa.error||dataa.status === 422 || dataa.status===400|| dataa.status===404||dataa.status===500)\r\n    {\r\n      Swal.fire({\r\n\t\t\t\ttitle: 'Error!',\r\n\t\t\t\ttext: 'There eas some error',\r\n\t\t\t\ticon: 'error',\r\n\t\t\t\tconfirmButtonText: 'Retry'\r\n\t\t\t\t})\r\n      } else {\r\n        Swal.fire({\r\n          title: 'Success!',\r\n          text: 'Messege Sent Successfully',\r\n          icon: 'success',\r\n          confirmButtonText: 'Success',\r\n          timer: '2000'\r\n          })\r\n          navigate(\"/pets\")\r\n        \r\n      }\r\n     \r\n    };\r\n\r\n  return (\r\n    <>\r\n      {ref.current.usertype===\"1\"&&navigate(\"/login\")}\r\n    <Header/>\r\n    <motion.section className='message' initial={{ width: 0 }} animate={{ width: \"auto\", transition: { duration: 0.5 } }} exit={{ x: window.innerWidth, transition: { duration: 0.5 } }}>\r\n      {\r\n        \r\n          <>\r\n         \r\n          <p>Send a message to the person or institution that is caring for the animal:</p>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n\r\n            <label htmlFor=\"name\">Name</label>\r\n              <input id='name'  type=\"text\" {...register(\"name\", {  maxLength: { value: 40, message: 'The maximum number of characters is 25' } })} value={ref.current.name}  placeholder='Enter your full name'  onChange={handleEdit} />\r\n              {errors.name && <p className=\"error\">{errors.name.message}</p>}\r\n\r\n\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input id='email'  type=\"text\" {...register(\"email\", {  maxLength: { value: 40, message: 'The maximum number of characters is 40' } })} value={ref.current.email}  placeholder='Enter your email'  onChange={handleEdit} />\r\n              {errors.email && <p className=\"error\">{errors.email.message}</p>}\r\n\r\n\r\n              <label htmlFor=\"phone\">Telephone</label>\r\n              <input type=\"tel\" id='phone' {...register('phone', { pattern: /\\(?[1-9]{2}\\)?\\s?9?[0-9]{8}/ })} placeholder='Enter your phone number' value={ref.current.phone} onChange={handleEdit} />\r\n              {errors.phone && <p className=\"error\">{errors.phone.message || 'Please verify the number entered'}</p>}\r\n\r\n\r\n              <label htmlFor=\"animalname\">Name of animal</label>\r\n              <input id='animalname' type=\"text\"  value={propsData.name}{...register(\"animalname\", { required: 'It is necessary to inform the name of the animal' })} placeholder='What Animal are you interested in?' />\r\n              {errors.animalname && <p className=\"error\">{errors.animalname.message}</p>}\r\n\r\n              <label htmlFor=\"question\">Message</label>\r\n              <textarea name=\"question\" id=\"question\" cols=\"30\" rows=\"10\" {...register('question', { required: 'It is necessary to write a message', maxLength: { value: 500, message: 'Maximum digits can be 500' } })} placeholder='Enter your message' spellCheck='false'></textarea>\r\n              {errors.question && <p className=\"error\">{errors.question.message}</p>}\r\n\r\n              <Button type='submit' children='SEND' />\r\n            </form>\r\n          </>\r\n        \r\n      }\r\n    </motion.section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Querypage;\r\n\r\n","/home/ubuntu/p4u/frontend/src/Components/Initial.js",["187"],[],"import { Link } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\nimport Header from \"./Header\";\r\n\r\nimport { Helmet } from 'react-helmet';\r\nimport SvgComponent from '../assets/logo-no-background3.png'\r\nimport useMediaQuery from '../hooks/useMediaQuery';\r\n\r\nconst Home = () => {\r\n  const matches = useMediaQuery('(max-width: 767px)');\r\n\r\n  return (\r\n    <>\r\n    <Header/>\r\n    <motion.section className='initial' initial={{ width: 0 }} animate={{ width: \"auto\", transition: { duration: 0.5 } }} exit={{ x: window.innerWidth, transition: { duration: 0.5 } }}>\r\n      <Helmet>\r\n        <style>{\"body { background-color: #3874ff; }\"}</style>\r\n      </Helmet>\r\n      <img src={ SvgComponent } alt=\"Logo \" />\r\n      <h3>Welcome!</h3>\r\n      <p>\r\n        Adopting can change a life. How about picking up your new best friend today? Come with us!\r\n      </p>\r\n      <div className='home__buttons'>\r\n        <Link className='button' to='/login'><b>Login</b></Link>\r\n        <br></br>\r\n        <Link className='button' to='/register'><b>Register</b></Link>\r\n       \r\n      </div>\r\n    </motion.section >\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;","/home/ubuntu/p4u/frontend/src/Components/adminPages/addanimal.js",["188","189"],[],"import Button from '../Button';\r\nimport React, {  useEffect } from \"react\";\r\nimport useState from 'react-usestateref'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\nimport { motion } from 'framer-motion';\r\nimport { useForm } from \"react-hook-form\";\r\nimport Header from \"../Header\";\r\nimport loggedUser from '../../assets/usernew.png';\r\n\r\nimport Swal from 'sweetalert2'\r\nconst bu=process.env.REACT_APP_BASEURL\r\nconst Addanimal = () => {\r\n \r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n  const [data,setuserdata,ref]=useState([]);\r\n  const navigate = useNavigate();\r\n  const cookies = new Cookies();\r\n  const token = cookies.get(\"jwtoken\");\r\n  const login = async () => {\r\n\r\n    try {\r\n      const res = await fetch(`${bu}/afterlogin`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      const data = await res.json();\r\n     \r\n     \r\n     \r\n      \r\n    } catch (err) {\r\n      navigate(\"/login\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    login();\r\n  }, []);\r\n\r\n  let name, value;\r\n  const handleEdit = (e) => {\r\n  \r\n    name = e.target.name;\r\n    value = e.target.value;\r\n    setuserdata({ ...data, [name]: value });\r\n  };\r\n\r\n  const { register, handleSubmit, formState: { errors } } = useForm({\r\n    mode: 'onBlur',\r\n    reValidateMode: 'onChange'\r\n  });\r\n\r\n\r\n\r\n  const handleFileUpload = async (e) => {\r\n  \r\n    const file = e.target.files[0];\r\n    const base64 = await convertToBase64(file);\r\n\r\n    setuserdata({ ...data, img : base64 })\r\n    \r\n  }\r\n\r\n\r\n\r\n  const onSubmit = async() => {\r\n   \r\n  \r\n   \r\n      const name=ref.current.name;\r\n      const img=ref.current.img;\r\n      const city=ref.current.city;\r\n      const behaviour=ref.current.behaviour;\r\n      const size=ref.current.size;\r\n      const age=ref.current.age;\r\n\r\n   \r\n      const res = await fetch(`${bu}/addanimal`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          \r\n         name:name,\r\n         img:img,\r\n         city:city,\r\n         behaviour:behaviour,\r\n         size:size,\r\n         age:age,\r\n\r\n        }),\r\n      });\r\n  \r\n    const dataa = await res.json();\r\n\r\n   \r\n    if(dataa.error||dataa.status === 422 || dataa.status===400|| dataa.status===404||dataa.status===500)\r\n    {\r\n      Swal.fire({\r\n        title: 'Error!',\r\n        text: 'Some Error occurred',\r\n        icon: 'error',\r\n        confirmButtonText: 'Retry'\r\n        })\r\n      } else {\r\n        Swal.fire({\r\n          title: 'Success!',\r\n          text: 'Registration Successful',\r\n          icon: 'success',\r\n          confirmButtonText: 'Success',\r\n          timer: '2000'\r\n          })\r\n          \r\n        navigate(\"/adminhome\")\r\n      }\r\n     \r\n     \r\n  \r\n    };\r\n\r\n  return (\r\n    <>\r\n      {ref.current.usertype===\"2\"&&navigate(\"/login\")}\r\n      <Header/>\r\n   \r\n    <motion.section className='message' initial={{ width: 0 }} animate={{ width: \"auto\", transition: { duration: 0.5 } }} exit={{ x: window.innerWidth, transition: { duration: 0.5 } }}>\r\n      {\r\n        \r\n          <>\r\n        \r\n            <p>Add a new friend to the list:</p>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n\r\n            <label htmlFor=\"img\">\r\n          <img src={ref.current.img||loggedUser} alt=\"\" />\r\n        </label>\r\n\r\n        <input \r\n          type=\"file\"\r\n          name=\"img\"\r\n          id='img'\r\n          accept='.jpeg, .png, .jpg'\r\n          {...register('img', { })}\r\n          onChange={(e) => handleFileUpload(e)}\r\n         />\r\n\r\n\r\n              <label htmlFor=\"name\">Name of pet</label>\r\n              <input id='name' type=\"text\" {...register(\"name\", { required: 'Name is required', maxLength: { value: 40, message: 'The maximum number of characters should be 40' } })} onChange={handleEdit} placeholder='Enter pets name' />\r\n              {errors.name && <p className=\"error\">{errors.name.message}</p>}\r\n              \r\n\r\n\r\n              \r\n\r\n\r\n              \r\n              <label htmlFor=\"city\">city</label>\r\n              <input id='city' type=\"text\" {...register(\"city\", { required: 'City is required',  })} onChange={handleEdit} placeholder='Where does the pet stay?' />\r\n              {errors.city && <p className=\"error\">{errors.city.message}</p>}\r\n\r\n\r\n              <label htmlFor=\"size\">size</label>\r\n              <input id='size' type=\"text\" {...register(\"size\", { required: 'Size is required', maxLength: { value: 40, message: 'The maximum number of characters should be 40' } })} onChange={handleEdit} placeholder='What is the size of pet?' />\r\n              {errors.size && <p className=\"error\">{errors.size.message}</p>}\r\n\r\n\r\n              <label htmlFor=\"age\">Age</label>\r\n              <input id='age' type=\"text\" {...register(\"age\", { required: 'Age is required', maxLength: { value: 25, message: 'The maximum number of characters should be 25' } })} onChange={handleEdit} placeholder='What is the pets age?' />\r\n              {errors.age && <p className=\"error\">{errors.age.message}</p>}\r\n\r\n\r\n              <label htmlFor=\"behaviour\">Behaviour</label>\r\n              <textarea name=\"behaviour\" id=\"behaviour\" cols=\"30\" rows=\"10\" {...register('behaviour', { maxLength: { value: 500, message: 'The maximum number of characters should be 500' } })} onChange={handleEdit} placeholder='Any special behaviour that you want to inform about the pet.' spellCheck='false'></textarea>\r\n              {errors.behaviour && <p className=\"error\">{errors.behaviour.message}</p>}\r\n\r\n             \r\n\r\n\r\n              \r\n\r\n              <Button type='submit' children='Add to list' />\r\n            </form>\r\n          </>\r\n       \r\n      }\r\n    </motion.section>\r\n    </>\r\n  );\r\n};\r\nfunction convertToBase64(file){\r\n  return new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsDataURL(file);\r\n    fileReader.onload = () => {\r\n      resolve(fileReader.result)\r\n    };\r\n    fileReader.onerror = (error) => {\r\n      reject(error)\r\n    }\r\n  })\r\n}\r\n\r\nexport default Addanimal;\r\n\r\n","/home/ubuntu/p4u/frontend/src/Components/adminPages/editanimal.js",["190","191"],[],"import Button from '../Button';\r\nimport React, {  useEffect } from \"react\";\r\nimport useState from 'react-usestateref'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\nimport { useForm } from \"react-hook-form\";\r\nimport Header from \"../Header\";\r\nimport Swal from 'sweetalert2'\r\nimport loggedUser from '../../assets/usernew.png';\r\nconst bu=process.env.REACT_APP_BASEURL\r\nconst Editanimal = (props) => {\r\n  const location = useLocation();\r\n  \r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n  const propsData = location.state;\r\n\r\n const [data,setuserdata,ref]=useState(propsData);\r\n \r\n  const navigate = useNavigate();\r\n  const cookies = new Cookies();\r\n  const token = cookies.get(\"jwtoken\");\r\n  const login = async () => {\r\n\r\n    try {\r\n      const res = await fetch(`${bu}/afterlogin`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      const data = await res.json();\r\n  \r\n    \r\n     \r\n      \r\n    } catch (err) {\r\n      navigate(\"/login\");\r\n      \r\n   \r\n      \r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    login();\r\n  }, []);\r\n  let name, value;\r\n  const handleEdit = (e) => {\r\n    name = e.target.name;\r\n    value = e.target.value;\r\n    setuserdata({ ...data, [name]: value });\r\n  };\r\n\r\n\r\n  const { register, handleSubmit, formState: { errors } } = useForm({\r\n    mode: 'onBlur',\r\n    reValidateMode: 'onChange'\r\n  });\r\n\r\n\r\n  \r\n  const handleFileUpload = async (e) => {\r\n  \r\n    const file = e.target.files[0];\r\n    const base64 = await convertToBase64(file);\r\n\r\n    setuserdata({ ...data, img : base64 })\r\n    \r\n  }\r\n\r\n  const onSubmit = async(data) => {\r\n   \r\n    \r\n     \r\n    const _id=ref.current._id;\r\n    const name=ref.current.name;\r\n    const img=ref.current.img;\r\n    const city=ref.current.city;\r\n    const behaviour=ref.current.behaviour;\r\n    const size=ref.current.size;\r\n    const age=ref.current.age;\r\n\r\n    \r\n    const res = await fetch(`${bu}/editanimal/${_id}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name:name,\r\n          img:img,\r\n          city:city,\r\n          behaviour:behaviour,\r\n          size:size,\r\n          age:age,\r\n        }),\r\n      });\r\n  \r\n    const dataa = await res.json();\r\n\r\n   \r\n    if(dataa.error||dataa.status === 422 || dataa.status===400|| dataa.status===404||dataa.status===500)\r\n    {\r\n      Swal.fire({\r\n        title: 'Error!',\r\n        text: 'Some Error occurred',\r\n        icon: 'error',\r\n        confirmButtonText: 'Retry'\r\n        })\r\n      } else {\r\n        Swal.fire({\r\n          title: 'Success!',\r\n          text: 'Update Successful',\r\n          icon: 'success',\r\n          confirmButtonText: 'Success',\r\n          timer: '2000'\r\n          })\r\n          navigate(\"/viewanimal\")\r\n      }\r\n      \r\n     \r\n  \r\n    };\r\n\r\n  return (\r\n    <>\r\n      {ref.current.usertype===\"2\"&&navigate(\"/login\")}\r\n    <Header/>\r\n    <motion.section className='message' initial={{ width: 0 }} animate={{ width: \"auto\", transition: { duration: 0.5 } }} exit={{ x: window.innerWidth, transition: { duration: 0.5 } }}>\r\n      {\r\n        \r\n          <>\r\n         \r\n          <p>Edit Animal details:</p>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <label htmlFor=\"img\">\r\n          <img src={ref.current.img||loggedUser} alt=\"\" />\r\n        </label>\r\n\r\n        <input \r\n          type=\"file\"\r\n          name=\"img\"\r\n          id='img'\r\n         \r\n          accept='.jpeg, .png, .jpg'\r\n          {...register('img', { })}\r\n          onChange={(e) => handleFileUpload(e)}\r\n         />\r\n\r\n\r\n              <label htmlFor=\"name\">Name of pet</label>\r\n              <input id='name' type=\"text\" {...register(\"name\", { required: 'Name is required', maxLength: { value: 40, message: 'The maximum number of characters should be 40' } })}value={ref.current.name}  onChange={handleEdit} placeholder='Enter pets name' />\r\n              {errors.name && <p className=\"error\">{errors.name.message}</p>}\r\n              \r\n\r\n\r\n              \r\n\r\n\r\n              \r\n              <label htmlFor=\"city\">city</label>\r\n              <input id='city' type=\"text\" value={ref.current.city} {...register(\"city\", { required: 'City is required',  })} onChange={handleEdit} placeholder='Where does the pet stay?' />\r\n              {errors.city && <p className=\"error\">{errors.city.message}</p>}\r\n\r\n\r\n              <label htmlFor=\"size\">size</label>\r\n              <input id='size' type=\"text\" value={ref.current.size}{...register(\"size\", { required: 'Size is required', maxLength: { value: 40, message: 'The maximum number of characters should be 40' } })} onChange={handleEdit} placeholder='What is the size of pet?' />\r\n              {errors.size && <p className=\"error\">{errors.size.message}</p>}\r\n\r\n\r\n              <label htmlFor=\"age\">Age</label>\r\n              <input id='age' type=\"text\" value={ref.current.age}{...register(\"age\", { required: 'Age is required', maxLength: { value: 25, message: 'The maximum number of characters should be 25' } })} onChange={handleEdit} placeholder='What is the pets age?' />\r\n              {errors.age && <p className=\"error\">{errors.age.message}</p>}\r\n\r\n\r\n              <label htmlFor=\"behaviour\">Behaviour</label>\r\n              <textarea name=\"behaviour\" value={ref.current.behaviour} id=\"behaviour\" cols=\"30\" rows=\"10\" {...register('behaviour', { maxLength: { value: 500, message: 'The maximum number of characters should be 500' } })} onChange={handleEdit} placeholder='Any special behaviour that you want to inform about the pet.' spellCheck='false'></textarea>\r\n              {errors.behaviour && <p className=\"error\">{errors.behaviour.message}</p>}\r\n\r\n             \r\n\r\n              <Button type='submit' children='Submit' />\r\n            </form>\r\n          </>\r\n        \r\n      }\r\n    </motion.section>\r\n    </>\r\n  );\r\n};\r\nfunction convertToBase64(file){\r\n  return new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsDataURL(file);\r\n    fileReader.onload = () => {\r\n      resolve(fileReader.result)\r\n    };\r\n    fileReader.onerror = (error) => {\r\n      reject(error)\r\n    }\r\n  })\r\n}\r\nexport default Editanimal;\r\n\r\n","/home/ubuntu/p4u/frontend/src/Components/adminPages/AdminHome.js",["192","193","194"],[],"import React, { useEffect } from \"react\";\r\nimport { motion } from 'framer-motion';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport useMediaQuery from '../../hooks/useMediaQuery.js';\r\nimport Header from \"../Header\";\r\nimport useState from 'react-usestateref'\r\nimport { Helmet } from 'react-helmet';\r\nimport SvgComponent from '../../assets/logo-no-background3.png'\r\n\r\nimport Cookies from \"universal-cookie\";\r\n\r\nconst bu=process.env.REACT_APP_BASEURL\r\n\r\nconst AdminHome = () => {\r\n  const matches = useMediaQuery('(max-width: 767px)');\r\n  const navigate = useNavigate();\r\n  const cookies = new Cookies();\r\n  const [data,setuserdata,ref]=useState([]);\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n  const token = cookies.get(\"jwtoken\");\r\n  const login = async () => {\r\n\r\n    try {\r\n      const res = await fetch(`${bu}/afterlogin`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      const data = await res.json();\r\n      setuserdata(data);\r\n    \r\n    } catch (err) {\r\n      navigate(\"/login\");\r\n      \r\n   \r\n      \r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    login();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <>\r\n    {ref.current.usertype===\"2\"&&navigate(\"/login\")}\r\n    <Header/>\r\n    \r\n    <motion.section className='initial' initial={{ width: 0 }} animate={{ width: \"auto\", transition: { duration: 0.5 } }} exit={{ x: window.innerWidth, transition: { duration: 0.5 } }}>\r\n    <Helmet>\r\n      <style>{\"body { background-color: #3874ff; }\"}</style>\r\n    </Helmet>\r\n    <img src={ SvgComponent }  alt=\"Logo \" />\r\n    <h3>Hello Admin!</h3>\r\n    <p>\r\n     'What do you want to do?\r\n    </p>\r\n    <div className='home__buttons'>\r\n      <Link className='button' to='/viewanimal'>View Animal List</Link>\r\n    </div>\r\n    <div className='home__buttons'>\r\n      <Link className='button' to='/addanimal'>Add Animal to List</Link>\r\n    </div>\r\n    <div className='home__buttons'>\r\n      <Link className='button' to='/responses'>See Responses</Link>\r\n      \r\n    </div>\r\n    <div className='home__buttons'>\r\n      <Link className='button' to='/Adminchat'>Connect to Users</Link>\r\n    </div>\r\n\r\n      \r\n  </motion.section >\r\n  </>\r\n  );\r\n};\r\n\r\nexport default AdminHome;","/home/ubuntu/p4u/frontend/src/Components/adminPages/Adminchat.js",["195","196"],[],"import React, { useEffect, useRef } from 'react';\r\nimport useState from 'react-usestateref';\r\nimport io from 'socket.io-client';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\nimport Header from '../Header';\r\n\r\nconst bu = process.env.REACT_APP_BASEURL;\r\n\r\nconst Adminchat = () => {\r\n    const navigate = useNavigate();\r\n    const cookies = new Cookies();\r\n\r\n    const [data, setUserData, ref] = useState([]);\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    \r\n    const token = cookies.get('jwtoken');\r\n\r\n    const login = async () => {\r\n        try {\r\n            const res = await fetch(`${bu}/afterlogin`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            if (res.status === 401) {\r\n                const error = new Error(res.error);\r\n                throw error;\r\n            }\r\n            const userData = await res.json();\r\n            setUserData(userData);\r\n          //  console.log(userData);\r\n        } catch (err) {\r\n            navigate('/login');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        login();\r\n    }, []);\r\n\r\n    const socket = useRef(null);\r\n\r\n    useEffect(() => {\r\n        socket.current = io('https://paws-4-you-2.onrender.com');\r\n\r\n        socket.current.on('connect', () => {\r\n           // console.log('Socket.IO connected');\r\n        });\r\n\r\n        socket.current.on('message', (message) => {\r\n            setMessages((prevMessages) => [...prevMessages, { content: message.content, sender: message.sender }]);\r\n        });\r\n\r\n        socket.current.on('disconnect', () => {\r\n            //console.log('Socket.IO disconnected');\r\n        });\r\n\r\n        return () => {\r\n            socket.current.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    const sendMessage = () => {\r\n        if (input.trim()) {\r\n            const message = {\r\n                content: input,\r\n                sender: \"Admin\" // Include the user's name here\r\n            };\r\n            \r\n            socket.current.emit('message', { message });\r\n            setInput('');\r\n        }\r\n    };\r\n\r\n    const styles = {\r\n        container: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            marginTop: '20px',\r\n        },\r\n        messages: {\r\n            border: '1px solid black',\r\n            height: '300px',\r\n            width: '100%',\r\n            maxWidth: '600px',\r\n            overflowY: 'scroll',\r\n            padding: '10px',\r\n            marginBottom: '10px',\r\n            backgroundColor: '#f9f9f9',\r\n        },\r\n        messageContainer: {\r\n            marginBottom: '5px',\r\n            padding: '5px',\r\n            borderRadius: '5px',\r\n        },\r\n        message: {\r\n          marginBottom: '5px',\r\n          background: '#36d6ad', // Light green background color\r\n          padding: '5px',\r\n          borderRadius: '5px',// Light green background color\r\n        },\r\n        adminMessage: {\r\n          marginBottom: '5px',\r\n          padding: '5px',\r\n          borderRadius: '5px',\r\n          textAlign: 'right',\r\n        },\r\n        inputContainer: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '100%',\r\n            maxWidth: '600px',\r\n        },\r\n        input: {\r\n            width: '80%',\r\n            padding: '10px',\r\n            border: '1px solid #ccc',\r\n            borderRadius: '4px',\r\n            marginRight: '10px',\r\n        },\r\n        button: {\r\n            padding: '10px 20px',\r\n            border: 'none',\r\n            backgroundColor: '#007bff',\r\n            color: 'white',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer',\r\n        },\r\n        buttonHover: {\r\n            backgroundColor: '#0056b3',\r\n        },\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {ref.current.usertype=== '2' && navigate('/login')}\r\n            <Header />\r\n            <div style={styles.container}>\r\n                <h2>You are logged in as admin </h2>\r\n                <div style={styles.messages}>\r\n                    {messages.map((message, index) => (\r\n                        <div key={index} style={styles.messageContainer}>\r\n                            <div style={message.sender === 'Admin' ? styles.adminMessage : styles.message}>\r\n                                <strong>{message.sender}: </strong> {message.content}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div style={styles.inputContainer}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={input}\r\n                        onChange={(e) => setInput(e.target.value)}\r\n                        onKeyDown={(e) => e.key === 'Enter' && sendMessage()}\r\n                        style={styles.input}\r\n                    />\r\n                    <button\r\n                        onClick={sendMessage}\r\n                        style={styles.button}\r\n                        onMouseOver={(e) => (e.currentTarget.style.backgroundColor = styles.buttonHover.backgroundColor)}\r\n                        onMouseOut={(e) => (e.currentTarget.style.backgroundColor = styles.button.backgroundColor)}\r\n                    >\r\n                        Send\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Adminchat;\r\n","/home/ubuntu/p4u/frontend/src/Components/adminPages/viewanimal.js",["197","198","199","200"],[],"import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useState from 'react-usestateref'\r\nimport { motion } from 'framer-motion';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Header from \"../Header\";\r\nimport loggedUser from '../../assets/usernew.png';\r\nimport Cookies from \"universal-cookie\";\r\nimport Swal from 'sweetalert2'\r\n\r\nconst bu=process.env.REACT_APP_BASEURL\r\n\r\nconst Viewanimal = () => {\r\n    const [petsdata,setpetsdata,ref]=useState([{}]);\r\n\r\n    useEffect(() => {\r\n      window.scrollTo(0, 0)\r\n    }, [])\r\n    const getanimals = async () => {\r\n\r\n        try {\r\n          const res = await fetch(`${bu}/getanimaldatafromredis`, {\r\n            method: \"GET\",\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            \r\n          });\r\n         \r\n          if (res.status === 401) {\r\n          \r\n            const error = new Error(res.error);\r\n            throw error;\r\n          }\r\n          const data = await res.json();\r\n          setpetsdata(data);\r\n        \r\n          \r\n          \r\n        } catch (err) {\r\n          //navigate(\"/login\");\r\n          \r\n        }\r\n      };\r\n\r\n    \r\n\r\n\r\n\r\n\r\n  const navigate = useNavigate();\r\n  const cookies = new Cookies();\r\n  const token = cookies.get(\"jwtoken\");\r\n  const login = async () => {\r\n\r\n    try {\r\n      const res = await fetch(`${bu}/afterlogin`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      const data = await res.json();\r\n \r\n      \r\n      \r\n    } catch (err) {\r\n      navigate(\"/login\");\r\n      \r\n     \r\n      \r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleclick1 =async (elem, idx) => {\r\n   \r\n   \r\n    try {\r\n      const res = await fetch(`${bu}/deleteanimal/${elem._id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      Swal.fire({\r\n\t\t\t\ttitle: 'Success!',\r\n\t\t\t\ttext: 'Pet Deleted',\r\n\t\t\t\ticon: 'success',\r\n\t\t\t\tconfirmButtonText: 'Success',\r\n\t\t\t\ttimer: '2000'\r\n\t\t\t\t})\r\n      getanimals();\r\n      \r\n    } catch (err) {\r\n      Swal.fire({\r\n\t\t\t\ttitle: 'Error!',\r\n\t\t\t\ttext: 'Deletion Failed',\r\n\t\t\t\ticon: 'error',\r\n\t\t\t\tconfirmButtonText: 'Retry'\r\n\t\t\t\t})\r\n      \r\n    }\r\n};\r\n\r\n  const handleclick =async (elem, idx) => {\r\n\r\n\r\n    Swal.fire({\r\n      title: 'Are you sure?',\r\n      text: \"You won't be able to revert this!\",\r\n      type: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm!'\r\n  }).then((result) => {\r\n    if (result.dismiss !== 'cancel') {\r\n\r\n      handleclick1(elem,idx);\r\n    }\r\n  \r\n})\r\n\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    login();\r\n    getanimals();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <>\r\n      {ref.current.usertype===\"2\"&&navigate(\"/login\")}\r\n       <Header/>\r\n  \r\n    <motion.section className='home' initial={{ width: 0 }} animate={{ width: \"auto\", transition: { duration: 0.5 } }} exit={{ x: window.innerWidth, transition: { duration: 0.5 } }}>\r\n      <p>Hello! <br /> These are the animals available!</p>\r\n      <div className='cards'>\r\n        {\r\n          ref.current.map((pet, i) => (\r\n            <div key={i} className='card'>\r\n            <img src={pet.img||loggedUser} />\r\n            <h4>{pet.name}</h4>\r\n            <ul>\r\n              <li>{pet.age}</li>\r\n              <li>{pet.size}</li>\r\n              <li>{pet.behaviour}</li>\r\n                \r\n              </ul>\r\n            \r\n              <p className='card__city'>{pet.city}</p>\r\n              <Link className='card__contact' to=\"/editanimal\" state={pet}>Edit the animal details</Link>\r\n              <button className='cpb' onClick={() => { handleclick(pet, i); }}>Delete</button>\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n    </motion.section >\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Viewanimal;","/home/ubuntu/p4u/frontend/src/Components/adminPages/responses.js",["201","202","203"],[],"import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useState from 'react-usestateref'\r\nimport { motion } from 'framer-motion';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\nimport Header from \"../Header\";\r\nimport Swal from 'sweetalert2'\r\nconst bu=process.env.REACT_APP_BASEURL\r\nconst Responses = () => {\r\n    const [petsdata,setpetsdata,ref]=useState([{}]);\r\n\r\n    \r\n    const getanimals = async () => {\r\n\r\n        try {\r\n          const res = await fetch(`${bu}/datafromredis`, {\r\n            method: \"GET\",\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            \r\n          });\r\n         \r\n          if (res.status === 401) {\r\n          \r\n            const error = new Error(res.error);\r\n            throw error;\r\n          }\r\n          const data = await res.json();\r\n          setpetsdata(data);\r\n          \r\n          \r\n          \r\n        } catch (err) {\r\n          navigate(\"/login\");\r\n          \r\n        }\r\n      };\r\n\r\n    \r\n\r\n\r\n\r\n\r\n  const navigate = useNavigate();\r\n  const cookies = new Cookies();\r\n  const token = cookies.get(\"jwtoken\");\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n  const login = async () => {\r\n\r\n    try {\r\n      const res = await fetch(`${bu}/afterlogin`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      const data = await res.json();\r\n     \r\n      \r\n      \r\n    } catch (err) {\r\n      navigate(\"/login\");\r\n      \r\n    \r\n      \r\n    }\r\n  };\r\n\r\n\r\n\r\n  \r\n\r\n  const handleclick1 =async (elem, idx) => {\r\n   \r\n   \r\n      try {\r\n        const res = await fetch(`${bu}/deletequestion/${elem._id}`, {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          \r\n        });\r\n       \r\n        if (res.status === 401) {\r\n        \r\n          const error = new Error(res.error);\r\n          throw error;\r\n        }\r\n        Swal.fire({\r\n          title: 'Success!',\r\n          text: 'Response Deleted',\r\n          icon: 'success',\r\n          confirmButtonText: 'Success',\r\n          timer: '2000'\r\n          })\r\n        getanimals();\r\n        \r\n      } catch (err) {\r\n        Swal.fire({\r\n          title: 'Error!',\r\n          text: 'Deletion Failed',\r\n          icon: 'error',\r\n          confirmButtonText: 'Retry'\r\n          })\r\n      }\r\n  };\r\n\r\n  const handleclick =async (elem, idx) => {\r\n\r\n\r\n    Swal.fire({\r\n      title: 'Are you sure?',\r\n      text: \"You won't be able to revert this!\",\r\n      type: 'warning',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Confirm!'\r\n  }).then((result) => {\r\n    if (result.dismiss !== 'cancel') {\r\n\r\n      handleclick1(elem,idx);\r\n    }\r\n   \r\n})\r\n \r\n   \r\n  };\r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    login();\r\n    getanimals();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <>\r\n      {ref.current.usertype===\"2\"&&navigate(\"/login\")}\r\n       <Header/>\r\n   \r\n    <motion.section className='home' initial={{ width: 0 }} animate={{ width: \"auto\", transition: { duration: 0.5 } }} exit={{ x: window.innerWidth, transition: { duration: 0.5 } }}>\r\n      <p>These are some active resopnses!</p>\r\n      <div className='cards'>\r\n        {\r\n          ref.current.map((pet, i) => (\r\n            <div key={i} className='card'>\r\n            <img src={pet.img} alt={pet.name} />\r\n            <h4>{pet.name}</h4>\r\n            <ul>\r\n              <li>{pet.phone}</li>\r\n              <li>{pet.email}</li>\r\n              <li>{pet.animalname}</li>\r\n                \r\n              </ul>\r\n            \r\n              <p className='card__city'>{pet.question}</p>\r\n              <Link className='card__contact' to=\"/getuserdetail\"  state={pet}>Get More Details About User</Link>\r\n              <button className='cpb' onClick={() => { handleclick(pet, i); }}>Delete Question</button>\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n    </motion.section >\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Responses;","/home/ubuntu/p4u/frontend/src/Components/Button.js",[],[],"/home/ubuntu/p4u/frontend/src/Components/Header.js",["204","205","206"],[],"import {  useEffect, useState } from 'react';\r\nimport { Link, useLocation,useNavigate } from 'react-router-dom';\r\nimport { Menu } from '@headlessui/react';\r\nimport Cookies from \"universal-cookie\";\r\nimport loggedUser from '../assets/usernew.png';\r\nimport Button from './Button';\r\nimport Swal from 'sweetalert2'\r\nimport SvgComponent from '../assets/logo-no-background1.png'\r\nimport Spinner from \"./Spinner\"\r\n\r\nconst bu=process.env.REACT_APP_BASEURL\r\nconst Header = () => {\r\n  const location = useLocation();\r\n  \r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  const navigate = useNavigate();\r\n  const [data, setdata] = useState({\r\n    image:loggedUser,\r\n  });\r\nconst[page,setpage]=useState(\"/userhome\")\r\n\r\nuseEffect(() => {\r\n  window.scrollTo(0, 0)\r\n}, [])\r\n\r\n\r\n\r\n  const cookies = new Cookies();\r\n  const token = cookies.get(\"jwtoken\");\r\n  const[auth,setauth]=useState(false)\r\n\r\n  const login = async () => {\r\n   \r\n\r\n    try {\r\n      const res = await fetch(`${bu}/afterlogin`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        \r\n      });\r\n     \r\n      if (res.status === 401) {\r\n      \r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n      const dataa = await res.json();\r\n      \r\n      setdata(dataa);\r\n      setIsLoading(false)   \r\n      if(dataa.usertype === '1')\r\n      setpage(\"/adminhome\")\r\n     \r\n      \r\n    } catch (err) {\r\n     \r\n      \r\n     \r\n    }\r\n  };\r\n\r\n  const handlelogout = () => {\r\n   \r\n    cookies.remove(\"jwtoken\", {path: '/'});\r\n    Swal.fire({\r\n      title: 'Success!',\r\n      text: 'Logged Out Successfully',\r\n      icon: 'success',\r\n      confirmButtonText: 'Success',\r\n      timer: '2000'\r\n      })\r\n\r\n        navigate(\"/login\");\r\n       \r\n  };\r\n\r\n\r\n     \r\n\r\n  useEffect(() => {\r\n    login();\r\n    \r\n  }, []);\r\n\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n    {(isLoading&&(location.pathname === '/querypage'||data.usertype === '1'||location.pathname === '/profile' || location.pathname === '/payment'|| location.pathname === '/userhome' || location.pathname === '/pets'|| location.pathname === '/chat')&&<Spinner/>)||\r\n    <header className='header'>\r\n      <nav>\r\n        <div>\r\n          <img className='header__logo' src={SvgComponent} alt=\"\" aria-hidden='true' />\r\n          <Link className='header__home' aria-label='Tela inicial' to={page} ></Link>\r\n         \r\n        </div>\r\n        {(location.pathname === '/querypage'||data.usertype === '1'||location.pathname === '/profile'||location.pathname === '/userhome' || location.pathname === '/pets'|| location.pathname === '/chat')&& \r\n        \r\n        <Menu>\r\n          <Menu.Button className=\"menu__button\">\r\n            <img className='header__user' src={data.image||loggedUser} alt=\"Usuário\" />\r\n          </Menu.Button>\r\n          <Menu.Items className='menu__content'>\r\n            <Link className='button' to=\"/profile\">View Profile</Link>\r\n            <Button handleClick={handlelogout} children=\"Logout\"></Button>\r\n          </Menu.Items>\r\n        </Menu>\r\n        \r\n        \r\n        \r\n        }\r\n      </nav>\r\n    </header>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","/home/ubuntu/p4u/frontend/src/hooks/useMediaQuery.js",[],["207"],"/home/ubuntu/p4u/frontend/src/Components/Spinner.js",[],[],{"ruleId":"208","severity":1,"message":"209","line":1,"column":38,"nodeType":"210","messageId":"211","endLine":1,"endColumn":46},{"ruleId":"208","severity":1,"message":"212","line":3,"column":8,"nodeType":"210","messageId":"211","endLine":3,"endColumn":13},{"ruleId":"208","severity":1,"message":"213","line":11,"column":8,"nodeType":"210","messageId":"211","endLine":11,"endColumn":16},{"ruleId":"214","severity":1,"message":"215","line":58,"column":5,"nodeType":"216","endLine":58,"endColumn":7,"suggestions":"217"},{"ruleId":"208","severity":1,"message":"218","line":10,"column":12,"nodeType":"210","messageId":"211","endLine":10,"endColumn":20},{"ruleId":"208","severity":1,"message":"219","line":11,"column":12,"nodeType":"210","messageId":"211","endLine":11,"endColumn":16},{"ruleId":"214","severity":1,"message":"220","line":93,"column":6,"nodeType":"216","endLine":93,"endColumn":8,"suggestions":"221"},{"ruleId":"208","severity":1,"message":"222","line":16,"column":9,"nodeType":"210","messageId":"211","endLine":16,"endColumn":17},{"ruleId":"214","severity":1,"message":"223","line":47,"column":6,"nodeType":"216","endLine":47,"endColumn":27,"suggestions":"224"},{"ruleId":"208","severity":1,"message":"225","line":14,"column":10,"nodeType":"210","messageId":"211","endLine":14,"endColumn":19},{"ruleId":"208","severity":1,"message":"219","line":18,"column":10,"nodeType":"210","messageId":"211","endLine":18,"endColumn":14},{"ruleId":"214","severity":1,"message":"226","line":59,"column":6,"nodeType":"216","endLine":59,"endColumn":8,"suggestions":"227"},{"ruleId":"208","severity":1,"message":"228","line":4,"column":32,"nodeType":"210","messageId":"211","endLine":4,"endColumn":40},{"ruleId":"208","severity":1,"message":"229","line":22,"column":10,"nodeType":"210","messageId":"211","endLine":22,"endColumn":15},{"ruleId":"230","severity":1,"message":"231","line":77,"column":15,"nodeType":"232","messageId":"233","endLine":77,"endColumn":17},{"ruleId":"230","severity":1,"message":"231","line":57,"column":17,"nodeType":"232","messageId":"233","endLine":57,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":57,"column":28,"nodeType":"232","messageId":"233","endLine":57,"endColumn":30},{"ruleId":"230","severity":1,"message":"231","line":140,"column":16,"nodeType":"232","messageId":"233","endLine":140,"endColumn":18},{"ruleId":"235","severity":1,"message":"236","line":179,"column":18,"nodeType":"237","messageId":"238","endLine":179,"endColumn":19,"suggestions":"239"},{"ruleId":"235","severity":1,"message":"236","line":179,"column":43,"nodeType":"237","messageId":"238","endLine":179,"endColumn":44,"suggestions":"240"},{"ruleId":"208","severity":1,"message":"219","line":11,"column":12,"nodeType":"210","messageId":"211","endLine":11,"endColumn":16},{"ruleId":"214","severity":1,"message":"226","line":36,"column":8,"nodeType":"216","endLine":36,"endColumn":10,"suggestions":"241"},{"ruleId":"208","severity":1,"message":"219","line":18,"column":9,"nodeType":"210","messageId":"211","endLine":18,"endColumn":13},{"ruleId":"208","severity":1,"message":"242","line":19,"column":9,"nodeType":"210","messageId":"211","endLine":19,"endColumn":15},{"ruleId":"214","severity":1,"message":"243","line":99,"column":6,"nodeType":"216","endLine":99,"endColumn":8,"suggestions":"244"},{"ruleId":"208","severity":1,"message":"213","line":8,"column":11,"nodeType":"210","messageId":"211","endLine":8,"endColumn":19},{"ruleId":"208","severity":1,"message":"245","line":5,"column":18,"nodeType":"210","messageId":"211","endLine":5,"endColumn":31},{"ruleId":"208","severity":1,"message":"219","line":19,"column":9,"nodeType":"210","messageId":"211","endLine":19,"endColumn":13},{"ruleId":"214","severity":1,"message":"226","line":55,"column":6,"nodeType":"216","endLine":55,"endColumn":8,"suggestions":"246"},{"ruleId":"214","severity":1,"message":"226","line":60,"column":6,"nodeType":"216","endLine":60,"endColumn":8,"suggestions":"247"},{"ruleId":"208","severity":1,"message":"248","line":10,"column":9,"nodeType":"210","messageId":"211","endLine":10,"endColumn":16},{"ruleId":"208","severity":1,"message":"219","line":42,"column":13,"nodeType":"210","messageId":"211","endLine":42,"endColumn":17},{"ruleId":"214","severity":1,"message":"226","line":54,"column":6,"nodeType":"216","endLine":54,"endColumn":8,"suggestions":"249"},{"ruleId":"208","severity":1,"message":"219","line":44,"column":13,"nodeType":"210","messageId":"211","endLine":44,"endColumn":17},{"ruleId":"214","severity":1,"message":"226","line":59,"column":6,"nodeType":"216","endLine":59,"endColumn":8,"suggestions":"250"},{"ruleId":"208","severity":1,"message":"248","line":17,"column":9,"nodeType":"210","messageId":"211","endLine":17,"endColumn":16},{"ruleId":"208","severity":1,"message":"219","line":20,"column":10,"nodeType":"210","messageId":"211","endLine":20,"endColumn":14},{"ruleId":"214","severity":1,"message":"226","line":56,"column":6,"nodeType":"216","endLine":56,"endColumn":8,"suggestions":"251"},{"ruleId":"208","severity":1,"message":"219","line":14,"column":12,"nodeType":"210","messageId":"211","endLine":14,"endColumn":16},{"ruleId":"214","severity":1,"message":"226","line":44,"column":8,"nodeType":"216","endLine":44,"endColumn":10,"suggestions":"252"},{"ruleId":"208","severity":1,"message":"218","line":14,"column":12,"nodeType":"210","messageId":"211","endLine":14,"endColumn":20},{"ruleId":"208","severity":1,"message":"219","line":73,"column":13,"nodeType":"210","messageId":"211","endLine":73,"endColumn":17},{"ruleId":"214","severity":1,"message":"220","line":150,"column":6,"nodeType":"216","endLine":150,"endColumn":8,"suggestions":"253"},{"ruleId":"254","severity":1,"message":"255","line":164,"column":13,"nodeType":"256","endLine":164,"endColumn":46},{"ruleId":"208","severity":1,"message":"218","line":12,"column":12,"nodeType":"210","messageId":"211","endLine":12,"endColumn":20},{"ruleId":"208","severity":1,"message":"219","line":72,"column":13,"nodeType":"210","messageId":"211","endLine":72,"endColumn":17},{"ruleId":"214","severity":1,"message":"220","line":153,"column":6,"nodeType":"216","endLine":153,"endColumn":8,"suggestions":"257"},{"ruleId":"208","severity":1,"message":"258","line":31,"column":9,"nodeType":"210","messageId":"211","endLine":31,"endColumn":13},{"ruleId":"208","severity":1,"message":"259","line":31,"column":14,"nodeType":"210","messageId":"211","endLine":31,"endColumn":21},{"ruleId":"214","severity":1,"message":"226","line":88,"column":6,"nodeType":"216","endLine":88,"endColumn":8,"suggestions":"260"},{"ruleId":"214","severity":1,"message":"261","line":39,"column":6,"nodeType":"216","endLine":39,"endColumn":13,"suggestions":"262","suppressions":"263"},"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","'navigate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setCurrentUser' and 'token'. Either include them or remove the dependency array.","ArrayExpression",["264"],"'petsdata' is assigned a value but never used.","'data' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getanimals' and 'login'. Either include them or remove the dependency array.",["265"],"'location' is assigned a value but never used.","React Hook useEffect has an unnecessary dependency: 'bu'. Either exclude it or remove the dependency array. Outer scope values like 'bu' aren't valid dependencies because mutating them doesn't re-render the component.",["266"],"'isLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["267"],"'useState' is defined but never used.","'login' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["268","269"],["270","271"],["272"],"'mydata' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getaboutuser' and 'login'. Either include them or remove the dependency array.",["273"],"'useController' is defined but never used.",["274"],["275"],"'matches' is assigned a value but never used.",["276"],["277"],["278"],["279"],["280"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["281"],"'auth' is assigned a value but never used.","'setauth' is assigned a value but never used.",["282"],"React Hook useEffect has a missing dependency: 'handleChange'. Either include it or remove the dependency array.",["283"],["284"],{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"messageId":"293","fix":"294","desc":"295"},{"messageId":"296","fix":"297","desc":"298"},{"messageId":"293","fix":"299","desc":"295"},{"messageId":"296","fix":"300","desc":"298"},{"desc":"291","fix":"301"},{"desc":"302","fix":"303"},{"desc":"291","fix":"304"},{"desc":"291","fix":"305"},{"desc":"291","fix":"306"},{"desc":"291","fix":"307"},{"desc":"291","fix":"308"},{"desc":"291","fix":"309"},{"desc":"287","fix":"310"},{"desc":"287","fix":"311"},{"desc":"291","fix":"312"},{"desc":"313","fix":"314"},{"kind":"315","justification":"316"},"Update the dependencies array to be: [setCurrentUser, token]",{"range":"317","text":"318"},"Update the dependencies array to be: [getanimals, login]",{"range":"319","text":"320"},"Update the dependencies array to be: [navigate, token]",{"range":"321","text":"322"},"Update the dependencies array to be: [login]",{"range":"323","text":"324"},"removeEscape",{"range":"325","text":"316"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"326","text":"327"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"328","text":"316"},{"range":"329","text":"327"},{"range":"330","text":"324"},"Update the dependencies array to be: [getaboutuser, login]",{"range":"331","text":"332"},{"range":"333","text":"324"},{"range":"334","text":"324"},{"range":"335","text":"324"},{"range":"336","text":"324"},{"range":"337","text":"324"},{"range":"338","text":"324"},{"range":"339","text":"320"},{"range":"340","text":"320"},{"range":"341","text":"324"},"Update the dependencies array to be: [handleChange, query]",{"range":"342","text":"343"},"directive","",[1215,1217],"[setCurrentUser, token]",[2043,2045],"[getanimals, login]",[1408,1429],"[navigate, token]",[1363,1365],"[login]",[4201,4202],[4201,4201],"\\",[4226,4227],[4226,4226],[1222,1224],[2065,2067],"[getaboutuser, login]",[1324,1326],[1356,1358],[1300,1302],[1450,1452],[1423,1425],[1352,1354],[3203,3205],[3295,3297],[1922,1924],[926,933],"[handleChange, query]"]