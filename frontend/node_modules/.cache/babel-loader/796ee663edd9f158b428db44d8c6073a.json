{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Downloads/paws4you (2)/paws4you/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/Downloads/paws4you (2)/paws4you/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Downloads/paws4you (2)/paws4you/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"D:/Downloads/paws4you (2)/paws4you/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"D:/Downloads/paws4you (2)/paws4you/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/Downloads/paws4you (2)/paws4you/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Downloads/paws4you (2)/paws4you/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\n\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\n\nexport var Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\n   * `Socket` constructor.\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n    /**\n     * Whether the socket is currently connected to the server.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.connected); // true\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.connected); // false\n     * });\n     */\n\n    _this.connected = false;\n    /**\n     * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n     * be transmitted by the server.\n     */\n\n    _this.recovered = false;\n    /**\n     * Buffer for packets received before the CONNECT packet\n     */\n\n    _this.receiveBuffer = [];\n    /**\n     * Buffer for packets that will be sent once the socket is connected\n     */\n\n    _this.sendBuffer = [];\n    /**\n     * The queue of packets to be sent with retry in case of failure.\n     *\n     * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n     * @private\n     */\n\n    _this._queue = [];\n    /**\n     * A sequence to generate the ID of the {@link QueuedPacket}.\n     * @private\n     */\n\n    _this._queueSeq = 0;\n    _this.ids = 0;\n    /**\n     * A map containing acknowledgement handlers.\n     *\n     * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n     *\n     * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n     * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n     * - `const value = await socket.emitWithAck(\"test\")`\n     *\n     * From those that don't:\n     *\n     * - `socket.emit(\"test\", (value) => { ... });`\n     *\n     * In the first case, the handlers will be called with an error when:\n     *\n     * - the timeout is reached\n     * - the socket gets disconnected\n     *\n     * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n     * an acknowledgement from the server.\n     *\n     * @private\n     */\n\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n\n    _this._opts = Object.assign({}, opts);\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\n   * Whether the socket is currently disconnected\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"connect\", () => {\n   *   console.log(socket.disconnected); // false\n   * });\n   *\n   * socket.on(\"disconnect\", () => {\n   *   console.log(socket.disconnected); // true\n   * });\n   */\n\n\n  _createClass(Socket, [{\n    key: \"disconnected\",\n    get: function get() {\n      return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n\n  }, {\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      args.unshift(ev);\n\n      if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n        this._addToQueue(args);\n\n        return this;\n      }\n\n      var packet = {\n        type: PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false; // event ack callback\n\n      if (\"function\" === typeof args[args.length - 1]) {\n        var id = this.ids++;\n        var ack = args.pop();\n\n        this._registerAckCallback(id, ack);\n\n        packet.id = id;\n      }\n\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n      if (discardPacket) {} else if (this.connected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n\n      this.flags = {};\n      return this;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_registerAckCallback\",\n    value: function _registerAckCallback(id, ack) {\n      var _this2 = this;\n\n      var _a;\n\n      var timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      } // @ts-ignore\n\n\n      var timer = this.io.setTimeoutFn(function () {\n        delete _this2.acks[id];\n\n        for (var i = 0; i < _this2.sendBuffer.length; i++) {\n          if (_this2.sendBuffer[i].id === id) {\n            _this2.sendBuffer.splice(i, 1);\n          }\n        }\n\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n\n      var fn = function fn() {\n        // @ts-ignore\n        _this2.io.clearTimeoutFn(timer);\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        ack.apply(_this2, args);\n      };\n\n      fn.withError = true;\n      this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n\n  }, {\n    key: \"emitWithAck\",\n    value: function emitWithAck(ev) {\n      var _this3 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n\n      return new Promise(function (resolve, reject) {\n        var fn = function fn(arg1, arg2) {\n          return arg1 ? reject(arg1) : resolve(arg2);\n        };\n\n        fn.withError = true;\n        args.push(fn);\n\n        _this3.emit.apply(_this3, [ev].concat(args));\n      });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n\n  }, {\n    key: \"_addToQueue\",\n    value: function _addToQueue(args) {\n      var _this4 = this;\n\n      var ack;\n\n      if (typeof args[args.length - 1] === \"function\") {\n        ack = args.pop();\n      }\n\n      var packet = {\n        id: this._queueSeq++,\n        tryCount: 0,\n        pending: false,\n        args: args,\n        flags: Object.assign({\n          fromQueue: true\n        }, this.flags)\n      };\n      args.push(function (err) {\n        if (packet !== _this4._queue[0]) {\n          // the packet has already been acknowledged\n          return;\n        }\n\n        var hasError = err !== null;\n\n        if (hasError) {\n          if (packet.tryCount > _this4._opts.retries) {\n            _this4._queue.shift();\n\n            if (ack) {\n              ack(err);\n            }\n          }\n        } else {\n          _this4._queue.shift();\n\n          if (ack) {\n            for (var _len5 = arguments.length, responseArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n              responseArgs[_key5 - 1] = arguments[_key5];\n            }\n\n            ack.apply(void 0, [null].concat(responseArgs));\n          }\n        }\n\n        packet.pending = false;\n        return _this4._drainQueue();\n      });\n\n      this._queue.push(packet);\n\n      this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_drainQueue\",\n    value: function _drainQueue() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (!this.connected || this._queue.length === 0) {\n        return;\n      }\n\n      var packet = this._queue[0];\n\n      if (packet.pending && !force) {\n        return;\n      }\n\n      packet.pending = true;\n      packet.tryCount++;\n      this.flags = packet.flags;\n      this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n\n      this.io._packet(_packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this5 = this;\n\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this5._sendConnectPacket(data);\n        });\n      } else {\n        this._sendConnectPacket(this.auth);\n      }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n\n  }, {\n    key: \"_sendConnectPacket\",\n    value: function _sendConnectPacket(data) {\n      this.packet({\n        type: PacketType.CONNECT,\n        data: this._pid ? Object.assign({\n          pid: this._pid,\n          offset: this._lastOffset\n        }, data) : data\n      });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason, description) {\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n\n      this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_clearAcks\",\n    value: function _clearAcks() {\n      var _this6 = this;\n\n      Object.keys(this.acks).forEach(function (id) {\n        var isBuffered = _this6.sendBuffer.some(function (packet) {\n          return String(packet.id) === id;\n        });\n\n        if (!isBuffered) {\n          // note: handlers that do not accept an error as first argument are ignored here\n          var ack = _this6.acks[id];\n          delete _this6.acks[id];\n\n          if (ack.withError) {\n            ack.call(_this6, new Error(\"socket has been disconnected\"));\n          }\n        }\n      });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n\n      switch (packet.type) {\n        case PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            this.onconnect(packet.data.sid, packet.data.pid);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n\n          break;\n\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n\n        case PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n\n        case PacketType.CONNECT_ERROR:\n          this.destroy();\n          var err = new Error(packet.data.message); // @ts-ignore\n\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n\n      if (null != packet.id) {\n        args.push(this.ack(packet.id));\n      }\n\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n\n        var _iterator = _createForOfIteratorHelper(listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n\n      if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n        this._lastOffset = args[args.length - 1];\n      }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n\n        self.packet({\n          type: PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n\n      if (typeof ack !== \"function\") {\n        return;\n      }\n\n      delete this.acks[packet.id]; // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n\n      if (ack.withError) {\n        packet.data.unshift(null);\n      } // @ts-ignore\n\n\n      ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id, pid) {\n      this.id = id;\n      this.recovered = pid && this._pid === pid;\n      this._pid = pid; // defined only if connection state recovery is enabled\n\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n\n      this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this7 = this;\n\n      this.receiveBuffer.forEach(function (args) {\n        return _this7.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        _this7.notifyOutgoingListeners(packet);\n\n        _this7.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        this.packet({\n          type: PacketType.DISCONNECT\n        });\n      } // remove socket from pool\n\n\n      this.destroy();\n\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n\n      return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n\n  }, {\n    key: \"timeout\",\n    value: function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"onAnyOutgoing\",\n    value: function onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"prependAnyOutgoing\",\n    value: function prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n\n  }, {\n    key: \"offAnyOutgoing\",\n    value: function offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyOutgoingListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n\n  }, {\n    key: \"listenersAnyOutgoing\",\n    value: function listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n\n  }, {\n    key: \"notifyOutgoingListeners\",\n    value: function notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        var listeners = this._anyOutgoingListeners.slice();\n\n        var _iterator2 = _createForOfIteratorHelper(listeners),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener.apply(this, packet.data);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }]);\n\n  return Socket;\n}(Emitter);","map":{"version":3,"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","io","nsp","opts","connected","recovered","receiveBuffer","sendBuffer","_queue","_queueSeq","ids","acks","flags","auth","_opts","assign","_autoConnect","open","subs","onopen","bind","onpacket","onerror","onclose","subEvents","_readyState","args","unshift","emit","apply","ev","hasOwnProperty","Error","toString","retries","fromQueue","volatile","_addToQueue","packet","type","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","notifyOutgoingListeners","push","_a","timeout","ackTimeout","undefined","timer","setTimeoutFn","i","splice","call","fn","clearTimeoutFn","withError","Promise","resolve","reject","arg1","arg2","tryCount","pending","err","hasError","shift","responseArgs","_drainQueue","force","_packet","_sendConnectPacket","CONNECT","_pid","pid","offset","_lastOffset","emitReserved","reason","description","_clearAcks","keys","forEach","isBuffered","some","String","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","subDestroy","_anyOutgoingListeners"],"sources":["D:/Downloads/paws4you (2)/paws4you/frontend/node_modules/socket.io-client/build/esm/socket.js"],"sourcesContent":["import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        /**\n         * A map containing acknowledgement handlers.\n         *\n         * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n         *\n         * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n         * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n         * - `const value = await socket.emitWithAck(\"test\")`\n         *\n         * From those that don't:\n         *\n         * - `socket.emit(\"test\", (value) => { ... });`\n         *\n         * In the first case, the handlers will be called with an error when:\n         *\n         * - the timeout is reached\n         * - the socket gets disconnected\n         *\n         * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n         * an acknowledgement from the server.\n         *\n         * @private\n         */\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        const fn = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, args);\n        };\n        fn.withError = true;\n        this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            const fn = (arg1, arg2) => {\n                return arg1 ? reject(arg1) : resolve(arg2);\n            };\n            fn.withError = true;\n            args.push(fn);\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n        this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n        Object.keys(this.acks).forEach((id) => {\n            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);\n            if (!isBuffered) {\n                // note: handlers that do not accept an error as first argument are ignored here\n                const ack = this.acks[id];\n                delete this.acks[id];\n                if (ack.withError) {\n                    ack.call(this, new Error(\"socket has been disconnected\"));\n                }\n            }\n        });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (typeof ack !== \"function\") {\n            return;\n        }\n        delete this.acks[packet.id];\n        // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n        if (ack.withError) {\n            packet.data.unshift(null);\n        }\n        // @ts-ignore\n        ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}