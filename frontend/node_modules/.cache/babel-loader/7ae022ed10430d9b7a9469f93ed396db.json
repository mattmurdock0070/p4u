{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win11\\\\Desktop\\\\My Projects\\\\paws4you\\\\frontend\\\\src\\\\Components\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst P2PChat = () => {\n  _s();\n\n  const [socket, setSocket] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const chatboxRef = useRef(null);\n  const [localConnection, setLocalConnection] = useState(null);\n  const [remoteConnection, setRemoteConnection] = useState(null);\n  const [localChannel, setLocalChannel] = useState(null);\n  const [remoteChannel, setRemoteChannel] = useState(null);\n  useEffect(() => {\n    const newSocket = io('http://localhost:5000');\n    setSocket(newSocket);\n    newSocket.on('connect', () => {\n      console.log('Connected to server');\n      createConnection();\n    });\n    newSocket.on('message', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n    return () => newSocket.close();\n  }, []);\n\n  const createConnection = async () => {\n    console.log('Creating peer connection...');\n    const localConnection = new RTCPeerConnection();\n    const remoteConnection = new RTCPeerConnection();\n    setLocalConnection(localConnection);\n    setRemoteConnection(remoteConnection);\n\n    localConnection.onicecandidate = event => {\n      if (event.candidate) {\n        socket.emit('candidate', event.candidate);\n      }\n    };\n\n    remoteConnection.onicecandidate = event => {\n      if (event.candidate) {\n        socket.emit('candidate', event.candidate);\n      }\n    };\n\n    const localChannel = localConnection.createDataChannel('chat');\n\n    localChannel.onmessage = event => {\n      setMessages(prevMessages => [...prevMessages, event.data]);\n    };\n\n    setLocalChannel(localChannel);\n\n    remoteConnection.ondatachannel = event => {\n      const remoteChannel = event.channel;\n\n      remoteChannel.onmessage = event => {\n        setMessages(prevMessages => [...prevMessages, event.data]);\n      };\n\n      setRemoteChannel(remoteChannel);\n    };\n\n    const offer = await localConnection.createOffer();\n    await localConnection.setLocalDescription(offer);\n    socket.emit('offer', localConnection.localDescription);\n  };\n\n  const sendMessage = () => {\n    if (inputMessage.trim() === '') return;\n    localChannel.send(inputMessage);\n    setInputMessage('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"P2P Chat App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chatboxRef,\n      id: \"chatbox\",\n      style: {\n        maxHeight: '300px',\n        overflowY: 'scroll',\n        border: '1px solid #ccc',\n        padding: '10px',\n        marginBottom: '10px'\n      },\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: msg\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputMessage,\n      onChange: e => setInputMessage(e.target.value),\n      placeholder: \"Type a message...\",\n      style: {\n        marginRight: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(P2PChat, \"p/g/dVm7L1qXjxZ+AshWWHVziJg=\");\n\n_c = P2PChat;\nexport default P2PChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"P2PChat\");","map":{"version":3,"names":["React","useEffect","useState","useRef","io","P2PChat","socket","setSocket","messages","setMessages","inputMessage","setInputMessage","chatboxRef","localConnection","setLocalConnection","remoteConnection","setRemoteConnection","localChannel","setLocalChannel","remoteChannel","setRemoteChannel","newSocket","on","console","log","createConnection","message","prevMessages","close","RTCPeerConnection","onicecandidate","event","candidate","emit","createDataChannel","onmessage","data","ondatachannel","channel","offer","createOffer","setLocalDescription","localDescription","sendMessage","trim","send","maxHeight","overflowY","border","padding","marginBottom","map","msg","index","e","target","value","marginRight"],"sources":["C:/Users/win11/Desktop/My Projects/paws4you/frontend/src/Components/Chat.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst P2PChat = () => {\r\n    const [socket, setSocket] = useState(null);\r\n    const [messages, setMessages] = useState([]);\r\n    const [inputMessage, setInputMessage] = useState('');\r\n    const chatboxRef = useRef(null);\r\n    const [localConnection, setLocalConnection] = useState(null);\r\n    const [remoteConnection, setRemoteConnection] = useState(null);\r\n    const [localChannel, setLocalChannel] = useState(null);\r\n    const [remoteChannel, setRemoteChannel] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const newSocket = io('http://localhost:5000');\r\n        setSocket(newSocket);\r\n\r\n        newSocket.on('connect', () => {\r\n            console.log('Connected to server');\r\n            createConnection();\r\n        });\r\n\r\n        newSocket.on('message', (message) => {\r\n            setMessages(prevMessages => [...prevMessages, message]);\r\n        });\r\n\r\n        return () => newSocket.close();\r\n    }, []);\r\n\r\n    const createConnection = async () => {\r\n        console.log('Creating peer connection...');\r\n        const localConnection = new RTCPeerConnection();\r\n        const remoteConnection = new RTCPeerConnection();\r\n\r\n        setLocalConnection(localConnection);\r\n        setRemoteConnection(remoteConnection);\r\n\r\n        localConnection.onicecandidate = (event) => {\r\n            if (event.candidate) {\r\n                socket.emit('candidate', event.candidate);\r\n            }\r\n        };\r\n\r\n        remoteConnection.onicecandidate = (event) => {\r\n            if (event.candidate) {\r\n                socket.emit('candidate', event.candidate);\r\n            }\r\n        };\r\n\r\n        const localChannel = localConnection.createDataChannel('chat');\r\n        localChannel.onmessage = (event) => {\r\n            setMessages(prevMessages => [...prevMessages, event.data]);\r\n        };\r\n        setLocalChannel(localChannel);\r\n\r\n        remoteConnection.ondatachannel = (event) => {\r\n            const remoteChannel = event.channel;\r\n            remoteChannel.onmessage = (event) => {\r\n                setMessages(prevMessages => [...prevMessages, event.data]);\r\n            };\r\n            setRemoteChannel(remoteChannel);\r\n        };\r\n\r\n        const offer = await localConnection.createOffer();\r\n        await localConnection.setLocalDescription(offer);\r\n        socket.emit('offer', localConnection.localDescription);\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        if (inputMessage.trim() === '') return;\r\n        localChannel.send(inputMessage);\r\n        setInputMessage('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>P2P Chat App</h1>\r\n            <div ref={chatboxRef} id=\"chatbox\" style={{ maxHeight: '300px', overflowY: 'scroll', border: '1px solid #ccc', padding: '10px', marginBottom: '10px' }}>\r\n                {messages.map((msg, index) => (\r\n                    <div key={index}>{msg}</div>\r\n                ))}\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                value={inputMessage}\r\n                onChange={(e) => setInputMessage(e.target.value)}\r\n                placeholder=\"Type a message...\"\r\n                style={{ marginRight: '10px' }}\r\n            />\r\n            <button onClick={sendMessage}>Send</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default P2PChat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}